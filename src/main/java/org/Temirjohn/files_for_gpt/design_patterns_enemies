package org.Temirjohn.entity.enemies;

/**
 * Enumeration for the difficulty of the game
 * @author Ryan Sharo, Ricardo Almeida
 *
 */
public enum Difficulty {
	
	EASY("/difficulties/Easy-Difficulty.txt"),
	MEDIUM("/difficulties/Medium-Difficulty.txt"),
	HARD("/difficulties/Hard-Difficulty.txt");
	
	private String path;
	
	private Difficulty(String path) {
		this.path = path;
	}
	
	/**
	 * Get the file path of the corresponding difficulty file
	 * @return file path in String
	 */
	public String getPath() { return path; }
}

package org.Temirjohn.entity.enemies;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Stroke;

import org.Temirjohn.entity.Direction;
import org.Temirjohn.entity.Entity;

/**
 * 
 * @author Pedro Arias, refactored by Ricardo Almeida, updated by Ryan Sharp
 *
 */
public class Enemy extends Entity implements IEnemy {
	// Attributes
	protected int speed = 2;	// Pixels per update. Default is 2
	protected int distTraveled = 0;	// The distance traveled in pixels
	private EnemyType currentType;	// This is currently needed to keep track of the type of enemy it is
	protected int originalHealth;

	public Enemy(int x, int y, EnemyType type, Direction dir) {
		super(x, y, type.getSpritePath());
		this.setDirection(dir);
		this.setHealth(type.getHealth());
		this.setOriginalHealth(type.getHealth());
		this.setStrength(type.getStrength());
		this.setCollisionBox(new Rectangle(10,10));	// This might have to be updated
		
		switch(currentDirection) {
		case UP:
			this.angle = Math.toRadians(-90);
			break;
		case DOWN:
			this.angle = Math.toRadians(90);
			break;
		case LEFT:
			this.angle = Math.toRadians(180);
			break;
		case RIGHT:
			this.angle = Math.toRadians(0);
			break;
		}
		// Store the enemy type
		currentType = type;
	}
	

	protected void move() {
		updateDirection();
		
		switch(currentDirection) {
		case UP:
			y -= speed;
			break;
		case DOWN:
			y += speed;
			break;
		case LEFT:
			x -= speed;
			break;
		case RIGHT:
			x += speed;
			break;
		}
		
		// Add to the distance traveled
		addDistance();
		
		if(distTraveled >= gp.getState().getLevel().getPathLength()) {
			gp.getState().getPlayer().removeHealth(health);
			destroy();
		}
	}
	
	private void updateDirection() {
		switch (this.currentDirection) {
		case UP:
			if(y % gp.TILE_SIZE == 0) {
				int row = y / gp.TILE_SIZE;
				int col = x / gp.TILE_SIZE;
				if(row > 0) { // if not on top of screen
					int nextTile = gp.getState().getLevel().getMap()[col][row - 1];
					if(nextTile == 0) { // if tile above is not path
						if(col != 0 && gp.getState().getLevel().getMap()[col - 1][row] == 1) { // if tile left is path
							this.setDirection(Direction.LEFT);
							this.setAngle(Math.toRadians(180));
						}
						else if(col != gp.MAX_SCREEN_COL && gp.getState().getLevel().getMap()[col + 1][row] == 1) { // if tile right is path
							this.setDirection(Direction.RIGHT);
							this.setAngle(Math.toRadians(0));
						}
					}
				}
			}
			break;
		case DOWN:
			if(y % gp.TILE_SIZE == 0) {
				int row = y / gp.TILE_SIZE;
				int col = x / gp.TILE_SIZE;
				if(row < gp.MAX_SCREEN_ROW - 1) { // if not on bottom of screen
					int nextTile = gp.getState().getLevel().getMap()[col][row + 1];
					if(nextTile == 0) { // if tile below is not path
						if(col != 0 && gp.getState().getLevel().getMap()[col - 1][row] == 1) { // if tile left is path
							this.setDirection(Direction.LEFT);
							this.setAngle(Math.toRadians(180));
						}
						else if(col != gp.MAX_SCREEN_COL && gp.getState().getLevel().getMap()[col + 1][row] == 1) { // if tile right is path
							this.setDirection(Direction.RIGHT);
							this.setAngle(Math.toRadians(0));
						}
					}
				}
			}
			break;
		case RIGHT:
			if(x % gp.TILE_SIZE == 0) {
				int row = y / gp.TILE_SIZE;
				int col = x / gp.TILE_SIZE;
				if(col < gp.MAX_SCREEN_COL - 1) { // if not on right of screen
					int nextTile = gp.getState().getLevel().getMap()[col + 1][row];
					if(nextTile == 0) { // if tile right is not path
						if(row != 0 && gp.getState().getLevel().getMap()[col][row - 1] == 1) { // if tile up is path
							this.setDirection(Direction.UP);
							this.setAngle(Math.toRadians(-90));
						}
						else if(row != gp.MAX_SCREEN_ROW && gp.getState().getLevel().getMap()[col][row + 1] == 1) { // if tile bottom is path
							this.setDirection(Direction.DOWN);
							this.setAngle(Math.toRadians(90));
						}
					}
				}
			}
			break;
		case LEFT:
			if(x % gp.TILE_SIZE == 0) {
				int row = y / gp.TILE_SIZE;
				int col = x / gp.TILE_SIZE;
				if(col > 0) { // if not on left of screen
					int nextTile = gp.getState().getLevel().getMap()[col - 1][row];
					if(nextTile == 0) { // if tile left is not path
						if(row != 0 && gp.getState().getLevel().getMap()[col][row - 1] == 1) { // if tile up is path
							this.setDirection(Direction.UP);
							this.setAngle(Math.toRadians(-90));
						}
						else if(row != gp.MAX_SCREEN_ROW && gp.getState().getLevel().getMap()[col][row + 1] == 1) { // if tile bottom is path
							this.setDirection(Direction.DOWN);
							this.setAngle(Math.toRadians(90));
						}
					}
				}
			}
			break;				
		}
	}
	
	/**
	 * set the original health of the enemy for future reference
	 * @param health
	 */
	public void setOriginalHealth(int health) {
		originalHealth = health;
	}
	
	/**
	 * get the original health of the enemy for reference
	 * @return original amount of health
	 */
	public int getOriginalHealth() { return originalHealth; }
	
	/**
	 * Adds to the distance traveled by the Enemy entity
	 */
	protected void addDistance() {
		distTraveled += speed;
	}
	
	/**
	 * Returns the current speed of the enemy
	 * @return speed Integer representing the speed of the enemy object
	 */
	public int getSpeed() { return speed; }
	
	/**
	 * Sets the speed of the enemy instance
	 * @param speed
	 */
	public void setSpeed(int speed) {
		this.speed = speed;
	}
		
	/**
	 * Overrides the default update method 
	 */
	@Override
	public void update() {
		// Move this enemy to the new position
		this.move();
		
		// TODO Other related update operations if needed
	}
	
	@Override
	public void takeDamage(int damage) {
		health -= damage;
		if(health <= 0) {
			destroy();
		}
	}
	
	/**
	 * Returns a clone of the current Enemy instance
	 */
	public Enemy clone() {
		Enemy clone = new Enemy(x, y, currentType, currentDirection);
		clone.setHealth(this.getHealth());
		clone.setStrength(this.getStrength());
		clone.setCollisionBox(this.getCollisionBox());
		clone.x = this.x;
		clone.y = this.y;
		clone.gp = this.gp;
		clone.collision = this.collision;
		clone.angle = this.angle;
		return clone;
	}
	
	/**
	 * TODO Needs implementation
	 */
	public EnemyManager getComposite() {
		return null;
	}

	/**
	 * Returns the distance traveled by the enemy instance
	 */
	public int getDistanceTraveled() {
		return distTraveled;
	}
	
	/**
	 * Superclass override for Interface implementation
	 */
	@Override
	public void setHealth(int health) {
		super.setHealth(health);
	}
	
	/**
	 * Superclass override for Interface implementation
	 */
	@Override
	public void setStrength(int strength) {
		super.setStrength(strength);
	}
	
	/**
	 * @return Hashcode for the current instance of Enemy
	 */
	@Override
	public int hashCode() {
		return super.hashCode() + speed;
	}

	/**
	 *
	 * @param obj The object to compare against
	 * @return boolean True or False
	 */
	@Override
	public boolean equals(Object obj) {
		if(super.equals((Enemy)obj) && speed == ((Enemy)obj).speed)
			return true;
		return false;
	}

	/**
	 * Returns a string representation of the object
	 * @return Instance information
	 */
	@Override
	public String toString() {
		StringBuilder output = new StringBuilder();
		output.append(String.format("%s", super.toString()));		
		output.append(String.format("Speed: %d", speed));

		return output.toString();
	}

	@Override
	public void destroy() {
		gp.getState().getEnemyManager().remove(this);
	}
	
	@Override
	public void draw(Graphics2D g2) {
		super.draw(g2);
		if(getHealth() < getOriginalHealth()) {
			//System.out.println("drawing health bar");
			g2.setColor(Color.red);
			g2.fillRect(x, y - (2 * gp.SCALE) - (gp.TILE_SIZE / 8), (int)(((double)getHealth() / getOriginalHealth()) * gp.TILE_SIZE), gp.TILE_SIZE / 8);
			Stroke original = g2.getStroke();
			g2.setStroke(new BasicStroke(gp.SCALE));
			g2.setColor(Color.black);
			g2.drawRect(x, y - (2 * gp.SCALE) - (gp.TILE_SIZE / 8), gp.TILE_SIZE, gp.TILE_SIZE / 8);
			g2.setStroke(original);
		}
	}
}

package org.Temirjohn.entity.enemies;

import org.Temirjohn.entity.Direction;

/**
 * Enemy factory that creates enemy entities
 *
 * @author Ricardo Almeida
 */
public class EnemyFactory {

    /**
     * Default constructor
     */
    public EnemyFactory() { }

    /**
     * Creates base enemy entities of various types
     * @param x <code>int</code> x coordinate
     * @param y <code>int</code> y coordinate
     * @param type <code>EnemyType</code> Type of enemy to create
     * @return IEnemy entity
     */
    public IEnemy createEnemy(int x, int y, EnemyType type, Direction dir) {
        switch(type) {
	        case EnemyType1:
	        	return new Enemy(x, y, EnemyType.EnemyType1, dir);
	        case EnemyType2:
	        	return new Enemy(x, y, EnemyType.EnemyType2, dir);
	        case EnemyType3:
	        	return new Enemy(x, y, EnemyType.EnemyType3, dir);
	        default:
	        	return null;
        }    	
    }
    
    /**
     * Creates a decorated enemy from a base enemy object
     * decoratorType is either 1 (health bonus) or 2 (strength bonus)
     * @param baseEnemy The base enemy to decorate
     * @param decoratorType The type of bonus to give the base enemy. 1 = health bonus, 2 = strength bonus
     * @return
     */
    public IEnemy createDecoratedEnemy(Enemy baseEnemy, int decoratorType) {
    	if(decoratorType == 1)
    		return new UpgradedEnemy30H(baseEnemy);
    	else if(decoratorType == 2) {
    		return new UpgradedEnemy20S(baseEnemy);
    	}
    	else {
    		return baseEnemy;
    	}
    }
}

package org.Temirjohn.entity.enemies;

import java.awt.Graphics2D;
import java.util.ArrayList;
import java.util.List;

import org.Temirjohn.levels.Level;

/**
 * Composite class for enemies. Keeps track of all living enemies and updates them every frame
 * @author Ricardo Almeida, Ryan Sharp
 *
 */
public class EnemyManager implements IEnemy {

	private List<IEnemy> children = new ArrayList<IEnemy>();
	private EnemyWaves waves;
	private List<IEnemy> removalQueue = new ArrayList<IEnemy>();
	
	/**
	 * Create new enemy manager for the given level and difficulty
	 * @param level - level being played
	 * @param d - difficulty being played
	 */
	public EnemyManager(Level level, Difficulty d) {
		waves = new EnemyWaves(level, d);
	}
	
	@Override
	public EnemyManager getComposite() {
		return this;
	}

	@Override
	public void update() {
		waves.update();
		for(IEnemy e : children) {
			e.update();
		}
		
		if(removalQueue.size() > 0) {
			
			//System.out.println("Destroying " + removalQueue.size() + " enemies...");
			
			for(IEnemy e : removalQueue) {
				children.remove(e);
			}
			
			removalQueue.clear();
		}
	}

	@Override
	public void draw(Graphics2D g2) {
		for(IEnemy e : children) {
			e.draw(g2);
		}
	}
	
	/**
	 * Add an enemy to the composite
	 * @param e - enemy to be added
	 */
	public void add(IEnemy e) { children.add(e); }
	
	/**
	 * remove an enemy from the composite
	 * @param e - enemy to be removed
	 */
	public void remove(IEnemy e) { removalQueue.add(e); }
	
	/**
	 * get an enemy from the composite
	 * @param target - enemy to be retrieved
	 * @return enemy if found, otherwise null
	 */
	public IEnemy getChild(IEnemy target) {
		for(IEnemy e : children) {
			if(e.equals(target))
				return e;
		}
		return null;
	}
	
	/**
	 * Get the enemy waves for the level
	 * @return
	 */
	public EnemyWaves getWaves() { return waves; }
	
	/**
	 * Get the list of enemies in the composite
	 * @return
	 */
	public List<IEnemy> getChildren() { return children; }

	@Override
	public int getDistanceTraveled() { return 0; }

	@Override
	public int getX() { return 0; }

	@Override
	public int getY() { return 0; }
	
	@Override
	public void takeDamage(int damage) {};
	
	public IEnemy clone() {
		// Not yet implemented
		return null;
	}

	@Override
	public int getHealth() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getStrength() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void setHealth(int health) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setStrength(int strength) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void destroy() {
		removalQueue = children;
	}

	@Override
	public void setOriginalHealth(int health) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int getOriginalHealth() {
		// TODO Auto-generated method stub
		return 0;
	}
}

package org.Temirjohn.entity.enemies;

/**
 * Holds the attributes for the different types of enemies
 * @author Ricardo Almeida
 *
 */
enum EnemyType {
	EnemyType1(1, 5, "EnemyType1", "/enemies/EnemyRed.png"),
	EnemyType2(2, 10, "EnemyType2", "/enemies/EnemyBlue.png"),
	EnemyType3(4, 15, "EnemyType3", "/enemies/EnemyGreen.png");
	
	private final int STRENGTH;
	private final int HEALTH;
	private final String ENEMY_TYPE;
	private final String SPRITE_PATH;
		
	private EnemyType(int STRENGTH, int HEALTH, String ENEMY_TYPE, String SPRITE_PATH) {
		this.STRENGTH = STRENGTH;
		this.HEALTH = HEALTH;
		this.ENEMY_TYPE = ENEMY_TYPE;
		this.SPRITE_PATH = SPRITE_PATH;
	}
	
	int getStrength() { return STRENGTH; }
	int getHealth() { return HEALTH; }
	String getType() { return ENEMY_TYPE; }
	String getSpritePath() { return SPRITE_PATH; }
}

package org.Temirjohn.entity.enemies;

import java.util.*;

import org.Temirjohn.entity.Direction;
import org.Temirjohn.levels.Level;

import java.io.*;
import org.Temirjohn.main.*;

/**
 * Handles the preparation and creation of enemy waves as well as spawning enemies
 * @author Ricardo Almeida, minor changes by Ryan Sharp
 *
 */
public class EnemyWaves {
	protected GamePanel gp;					// The main game panel
	protected List<IEnemy> enemySet;		// List of enemies to be spawned (cloned)
	protected int enemyWaves[][];	// Array that stores the data imported from the enemy waves file
	private int spawnRate = 12;				// Enemy spawn rate. Default is 1
	private int frameCount = 0;				// Spawn enemies every n frames. Default is 12
	private EnemyFactory enemyFactory = new EnemyFactory();
	private int currentWave = -1;
	private int currentIndex = 0;
	private boolean running;
	private int spawnX, spawnY;
	private Direction startDir;
	
	/**
	 * Default constructor
	 */
	public EnemyWaves(Level level, Difficulty d) { 
		this.gp = GamePanel.getInstance();
		setSpawnInfo(level.getStartX(), level.getStartY(), level.getStartDir());
		enemySet = new ArrayList<IEnemy>();
		loadEnemySet();
		loadEnemyWaves(d.getPath());
	}
	
	private void setSpawnInfo(int x, int y, Direction dir) {
		spawnX = x;
		spawnY = y;
		startDir = dir;
		
		System.out.println("Start x: " + spawnX + ", start Y: " + spawnY + ", Start dir: " + startDir.toString());
	}
	
	/**
	 * Loads the set of enemies to be used in the currently active level
	 */
	public void loadEnemySet() {
		// Create only base enemies for now
		// Note that the starting position is set to default values
		// Further development is needed to define the correct starting point
		enemySet.add(enemyFactory.createEnemy(spawnX, spawnY, EnemyType.EnemyType1, startDir));
		enemySet.add(enemyFactory.createEnemy(spawnX, spawnY, EnemyType.EnemyType2, startDir));
		enemySet.add(enemyFactory.createEnemy(spawnX, spawnY, EnemyType.EnemyType3, startDir));
	}
	
	private void createJaggedArray(String filePath) {
		InputStream is = getClass().getResourceAsStream(filePath);
        BufferedReader fileReader = new BufferedReader(new InputStreamReader(is));
        
        int numLines = 0;
        try {
        	while(fileReader.readLine() != null)
        		numLines++;
        }
        catch(IOException e) {
        	System.out.println("Something went wrong while reading the level waves file!");
        	e.printStackTrace();
        }
        
        //System.out.println(numLines + " lines found");
        enemyWaves = new int[numLines][];
	}
	
	/**
	 * Loads the enemy wave array data
	 */
	public void loadEnemyWaves(String filePath) { 
		createJaggedArray(filePath);
		BufferedReader fileReader;
		
		try {
            InputStream is = getClass().getResourceAsStream(filePath);
            fileReader = new BufferedReader(new InputStreamReader(is));
			
			String line[] = new String[1];
			int lineIndex = 0;
			
			while(lineIndex < enemyWaves.length) {
				line = fileReader.readLine().split(" ");
				enemyWaves[lineIndex] = new int[line.length];
				//System.out.println("Line " + lineIndex + " has " + line.length + " numbers");
				for(int i = 0; i < line.length; i++) {
					int digit = Integer.parseInt(line[i]);
					enemyWaves[lineIndex][i] = digit;
					//System.out.print(digit + " ");
				}
				
				//System.out.println();
				
				lineIndex++;
			}
			
			// Close the reader
			fileReader.close();
		}
		catch (IOException ex) {
			ex.printStackTrace();
		}
	}
	
	/**
	 * Updates all enemies/screen data/etc.
	 */
	public void update() { 
		frameCount++;
		
		if(frameCount > spawnRate) {
			if(running && currentIndex < enemyWaves[currentWave].length) {
				spawnNext();
			}
			else {
				running = false;
			}
			frameCount = 0;
		}
	}
	
	/**
	 * Spawns a new enemy and adds it to the EnemyManager
	 * @param index The ArrayList index of the enemy to spawn
	 */
	public void spawnNext() {
		int index = enemyWaves[currentWave][currentIndex] - 1;
		if(index >= 0) {
			gp.getState().getEnemyManager().add(enemySet.get(index).clone());	
		}
		currentIndex++;
	}
	
	/**
	 * Spawns the next wave of enemies
	 */
	public void nextWave() {
//		for(int i = 0; i < enemyWaves[currentWave].length; i++) {
//			spawnEnemy(enemyWaves[currentWave][i] - 1);
//		}
		running = true;
		currentIndex = 0;
		currentWave++;
	}
	
	/**
	 * Check whether the curret wave is still spawning enemies
	 * @return true if spawning, false if done
	 */
	public boolean getRunning() { return running; }
}

package org.Temirjohn.entity.enemies;

import java.awt.Graphics2D;

/**
 * Interface for Enemy types
 * @author Ricardo Almeida, Ryan Sharp
 *
 */
public interface IEnemy extends Cloneable {
	/**
	 * Get the EnemyManager composite
	 * @return itself if this is the enemy manager, otherwise null
	 */
	public EnemyManager getComposite();	
	
	/**
	 * update the state of this IEnemy
	 */
	public void update();	
	
	/**
	 * redraw this IEnemy
	 * @param g2
	 */
	public void draw(Graphics2D g2);
	
	/**
	 * Get the distance this IEnemy has travelled
	 * @return
	 */
	public int getDistanceTraveled();	
	
	/**
	 * Take the given amount of damage
	 * @param damage
	 */
	public void takeDamage(int damage);
	
	/**
	 * Get the x component of this enemy's position
	 * @return
	 */
	public int getX();	
	
	/**
	 * get the y component of this enemy's position
	 * @return
	 */
	public int getY();	
	
	/**
	 * get the health of this enemy
	 * @return
	 */
	public int getHealth();
	
	/**
	 * get the strength of this enemy
	 * @return
	 */
	public int getStrength();
	
	/**
	 * set the health of this enemy
	 * @param health
	 */
	public void setHealth(int health);
	
	/**
	 * set the strength of this enemy
	 * @param strength
	 */
	public void setStrength(int strength);
	
	/**
	 * destroy this enemy
	 */
	public void destroy();
	
	/**
	 * clone this enemy
	 * @return cloned enemy
	 */
	public IEnemy clone();
	
	/**
	 * set the original health of the enemy for future reference
	 * @param health
	 */
	public void setOriginalHealth(int health);
	
	/**
	 * get the original health of the enemy for reference
	 * @return original amount of health
	 */
	public int getOriginalHealth();
}

package org.Temirjohn.entity.enemies;

import java.awt.Graphics2D;

import org.Temirjohn.main.GamePanel;

/**
 * Enemy upgrades Decorator base class
 * Implements the IEnemy interface
 * Used to upgrade existing enemies
 * @author Ricardo Almeida
 *
 */
public abstract class UpgradedEnemy implements IEnemy {
	
	protected IEnemy baseEnemy;
	

	public UpgradedEnemy(Enemy enemy) {
		baseEnemy = enemy;
	}
	
	/**
	 * Returns the composite object
	 */
	public EnemyManager getComposite() {
		return null;
	}
	
	/**
	 * Updates the base enemy object
	 */
	public void update() {
		baseEnemy.update();
	}
	
	/**
	 * Draws the base enemy object
	 */
	public void draw(Graphics2D g2) {
		baseEnemy.draw(g2);
	}
	
	/**
	 * Returns the total distance traveled by the base enemy object
	 */
	public int getDistanceTraveled() {
		return baseEnemy.getDistanceTraveled();
	}
	
	/**
	 * Abstract method for implementing damage to enemies
	 */
	public abstract void takeDamage(int damage);
	
	/**
	 * Abstract method to return the overall health of the upgraded enemy 
	 */
	public abstract int getHealth();
	
	/**
	 * Abstract method to return the overall strength of the upgraded enemy 
	 */
	public abstract int getStrength();
	
	/**
	 * Abstract method to set the overall health of the upgraded enemy
	 */
	public abstract void setHealth(int health);
	
	/**
	 * Abstract method to set the overall strength of the upgraded enemy
	 */
	public abstract void setStrength(int strength);
	
	/**
	 * Returns the base enemy object's X coordinate value
	 */
	public int getX() {
		return baseEnemy.getX();
	}
	
	/**
	 * Returns the base enemy object's Y coordinate value
	 */
	public int getY() {
		return baseEnemy.getY();
	}
	
	/**
	 * Default implementation of the clone method.
	 * Returns a clone of the base enemy object.
	 */
	public IEnemy clone() {
		return baseEnemy.clone();
	}
	
	public void destroy() {
		GamePanel.getInstance().getState().getEnemyManager().remove(this);
	}
}

package org.Temirjohn.entity.enemies;

/**
 * decorator to give an enemy a bonus 20 strength
 * @author Ricardo Almeida
 *
 */
public class UpgradedEnemy20S extends UpgradedEnemy {
	private int BonusStrength = 20;
	
	public UpgradedEnemy20S(Enemy enemy) {
		super(enemy);
	}

	/**
	 * Returns the base enemy object's health
	 */
	@Override
	public int getHealth() {
		return baseEnemy.getHealth();
	}

	/**
	 * Returns the total strength of the upgraded enemy object
	 */
	@Override
	public int getStrength() {
		return baseEnemy.getStrength() + BonusStrength;
	}

	/**
	 * Causes the enemy object to take damage
	 */
	@Override
	public void takeDamage(int damage) {
		if(damage > 0 ) {
			baseEnemy.takeDamage(damage);
		}
	}

	/**
	 * Override to set the health of the base enemy object
	 */
	@Override
	public void setHealth(int health) {
		baseEnemy.setHealth(health);
	}

	/**
	 * Override method to set the strength of the upgraded enemy object
	 */
	@Override
	public void setStrength(int strength) {
		if(strength > 0) {
			BonusStrength = strength;
		}
	}

	@Override
	public void setOriginalHealth(int health) {
		baseEnemy.setOriginalHealth(health);
	}

	@Override
	public int getOriginalHealth() {
		return baseEnemy.getOriginalHealth();
	}
}

package org.Temirjohn.entity.enemies;

/**
 * Decorator that upgrades the health of Enemy entities
 * @author Ricardo Almeida
 *
 */
public class UpgradedEnemy30H extends UpgradedEnemy {
	protected int upgradedHealth = 30;				// The upgraded health amount. Should not go above the max bonus amount
	private final int maxHealth = upgradedHealth;	// CONSTANT: The max bonus health amount for this upgrade (gets the initial 30 amount)
	
	/**
	 * Default constructor that takes an Enemy type as the base object to be upgraded
	 * @param enemy The Enemy object to be upgraded 
	 */
	public UpgradedEnemy30H(Enemy enemy) {
		super(enemy);
		upgradedHealth = baseEnemy.getHealth() + maxHealth;
	}

	/**
	 * Returns the total health of the upgraded enemy object
	 */
	@Override
	public int getHealth() {
		return baseEnemy.getHealth() + upgradedHealth;
	}

	/**
	 * Returns the base enemy object's strength
	 */
	@Override
	public int getStrength() {
		return baseEnemy.getStrength();
	}

	/**
	 * takeDamage method override that applies health damage to the
	 * upgraded enemy and the base enemy objects
	 */
	@Override
	public void takeDamage(int damage) {
		if(damage > 0) {
			if(damage <= upgradedHealth) {
				upgradedHealth -= damage;
			}
			else {
				int subDamage = damage - upgradedHealth;
				upgradedHealth = 0;
				baseEnemy.takeDamage(subDamage);
			}	
		}
	}

	@Override
	public void setHealth(int health) {
		if(upgradedHealth < maxHealth) {
			int difference = maxHealth - upgradedHealth;
			upgradedHealth =+ difference;
			baseEnemy.setHealth(health - difference);
		}
		else {
			baseEnemy.setHealth(health);
		}
	}

	@Override
	public void setStrength(int strength) {
		baseEnemy.setStrength(strength);
	}
	
	@Override
	public void setOriginalHealth(int health) {
		baseEnemy.setOriginalHealth(health);
	}

	@Override
	public int getOriginalHealth() {
		return maxHealth;
	}
}
