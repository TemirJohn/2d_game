package org.Temirjohn.main;

import org.Temirjohn.entity.Entity;
import org.Temirjohn.entity.towers.ITower;
import org.Temirjohn.levels.Level;
import org.Temirjohn.levels.MapTile;

/**
 * Used to check the collision status of various entities as they update each frame
 * @author Ryan Sharp, RyiSnow
 *
 */
public class CollisionChecker {

	/**
	 * Check whether the given entity has collided with anything
	 * @param entity - entity being checked
	 */
	public static void check(Entity entity) {
		GamePanel gp = GamePanel.getInstance();

		if(entity.getX() >= 0 && entity.getX() <= gp.SCREEN_WIDTH - gp.TILE_SIZE && entity.getY() >= 0 && entity.getY() <= gp.SCREEN_HEIGHT - gp.TILE_SIZE) {
			int entityLeft = entity.getCollisionBox().x;
			int entityRight = entity.getCollisionBox().x + entity.getCollisionBox().width;
			int entityTop = entity.getCollisionBox().y;
			int entityBottom = entity.getCollisionBox().y + entity.getCollisionBox().height;

			int entityLeftCol = entityLeft / gp.TILE_SIZE;
			int entityRightCol = entityRight / gp.TILE_SIZE;
			int entityTopRow = entityTop / gp.TILE_SIZE;
			int entityBottomRow = entityBottom / gp.TILE_SIZE;

			Level currentLevel = gp.getState().getLevel();
			int currentMap[][] = currentLevel.getMap();
			MapTile currentTileSet[] = currentLevel.getTileSet();

			MapTile tile1 = currentTileSet[currentMap[entityLeftCol][entityTopRow]];
			MapTile tile2 = currentTileSet[currentMap[entityLeftCol][entityBottomRow]];
			MapTile tile3 = currentTileSet[currentMap[entityRightCol][entityTopRow]];
			MapTile tile4 = currentTileSet[currentMap[entityRightCol][entityBottomRow]];

			boolean collision = false;

			if(tile1.getCollision() || tile2.getCollision() || tile3.getCollision() || tile4.getCollision()) {
				collision = true;
			}

			for(ITower e : gp.getState().getTowerManager().getChildren()) {
				if(entity.getCollisionBox().intersects(e.getCollisionBox())) {
					collision = true;
				}
			}

			entity.setCollision(collision);
		}
	}
}


package org.Temirjohn.main;

import java.awt.Graphics;
import java.awt.Graphics2D;

import javax.swing.JPanel;

//import entity.Player;

/**
 * {@summary This class is responsible for rendering the graphics of the game as well as holding the game thread,
 * which is what allows the game to run continuously without constant user input.}
 * @author Ryan Sharp, RyiSnow (https://www.youtube.com/c/RyiSnow)
 *
 */
public class GamePanel extends JPanel implements Runnable{

	private static GamePanel instance;

	// Game Screen Settings
	private final int ORIGINAL_TILE_SIZE = 16; // Original art will be 16x16 pixels
	public final int SCALE = 3; // Art will be scaled up 3x due to larger screen resolution
	public final int TILE_SIZE = ORIGINAL_TILE_SIZE * SCALE; // Needs to be public for entities to draw the correct size tiles

	public final int MAX_SCREEN_COL = 20; // Screen width will fit 16 tiles
	public final int MAX_SCREEN_ROW = 15; // Screen height will fit 12 tiles
	public final int SCREEN_WIDTH = TILE_SIZE * MAX_SCREEN_COL;
	public final int SCREEN_HEIGHT = TILE_SIZE * MAX_SCREEN_ROW;

	private final int FPS = 60;

	// Game Object Management

	// Input Handling
	public final KeyHandler KEY_HANDLER;
	public final MouseHandler MOUSE_HANDLER;

	// Game Variables
	private GameState state;
	private Thread gameThread;

	private GamePanel() {
		instance = this;

		this.KEY_HANDLER = new KeyHandler();
		this.MOUSE_HANDLER = new MouseHandler();
		this.state = new MainMenuState();

		this.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);
		this.setDoubleBuffered(true);
		this.addKeyListener(KEY_HANDLER);
		this.addMouseListener(MOUSE_HANDLER);
		this.setFocusable(true);
	}

	/**
	 * {@summary Used to create/get singleton instance of GamePanel. Only one instance should ever exist at a given time.}
	 * @author Ryan Sharp
	 */
	public static GamePanel getInstance() {
		if(instance == null)
			instance = new GamePanel();
		return instance;
	}

	/**
	 * {@summary Used by Main.java to start the game once the JFrame is set up.}
	 * @author RyiSnow
	 */
	void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}

	/**
	 * {@summary Called automatically by the game thread upon start. Does not need any outside influence, but must be public due to inheritance.}
	 * @author RyiSnow
	 */
	@Override
	public void run() {

		double drawInterval = 1000000000/FPS;
		double delta = 0;
		long lastTime = System.nanoTime();
		long currentTime;
		long timer = 0;
		int drawCount = 0;

		while(gameThread != null) {

			currentTime = System.nanoTime();

			delta += (currentTime - lastTime) / drawInterval;
			timer += (currentTime - lastTime);
			lastTime = currentTime;

			if(delta > 1) {
				update();
				repaint();
				drawCount++;
				delta--;
			}

			if(timer >= 1000000000) {
//				System.out.println("FPS: " + drawCount);
				drawCount = 0;
				timer = 0;
			}
		}
	}

	/**
	 * {@summary Responsible for updating the position/state of every graphical component of the game.}
	 */
	private void update() {
		state.update();
	}

	/**
	 * {@summary Responsible for redrawing every graphical component of the game once all updates have occurred.}
	 */
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D)g;
		state.draw(g2);
	}

	/**
	 * Get the current state of the game.
	 * @return {@link GameState} Current state of game
	 */
	public GameState getState() { return state; }

	/**
	 * Use to change the state of the game
	 * @param state Game state to be updated to
	 */
	public void updateState(GameState state) {
		this.state.endState();
		this.state = state;
	}
}

package org.Temirjohn.main;

import java.awt.Graphics2D;

import org.Temirjohn.entity.SpriteNotFoundException;
import org.Temirjohn.entity.enemies.EnemyManager;
import org.Temirjohn.entity.towers.TowerManager;
import org.Temirjohn.levels.Level;
import org.Temirjohn.ui.GameplayUI;

/**
 * Game state used when the player is playing a level and the game is not paused
 * @author Ryan Sharp
 *
 */
public class GameplayState implements GameState {

	// Input handling and game thread
	private Level level;
	private TowerManager towerM;
	private EnemyManager enemyM;
	private Player player;
	private GameplayUI ui;


	public GameplayState(Level level, TowerManager towerM, EnemyManager enemyM, Player player) {
		this.level = level;
		this.towerM = towerM;
		this.enemyM = enemyM;
		this.player = player;
		try {
			ui = new GameplayUI();
		}
		catch(SpriteNotFoundException e) {
			System.out.println("Error: GameplayUI could not find necessary images.");
		}

	}

	@Override
	public void update() {
		ui.setHealth(player.getHealth());
		ui.setMoney(player.getMoney());
		enemyM.update();
		towerM.update();
		if(enemyM.getWaves().getRunning() == false && enemyM.getChildren().size() == 0) {
			ui.setWaveRunning(false);
		}
	}

	@Override
	public void draw(Graphics2D g2) {
		level.draw(g2);
		enemyM.draw(g2);
		towerM.draw(g2);
		g2.dispose();
	}

	@Override
	public StateType getType() {
		return StateType.GAMEPLAY;
	}

	@Override
	public void endState() {
		ui.remove();
	}

	/**
	 * Get this state's tile manager
	 * @return Current {@link TileManager}
	 */
	public Level getLevel() { return level; }

	/**
	 * Get this state's tower manager
	 * @return Current {@link TowerManager}
	 */
	public TowerManager getTowerManager() { return towerM; }

	/**
	 * Get this state's enemy manager
	 * @return Current {@link EnemyManager}
	 */
	public EnemyManager getEnemyManager() { return enemyM; }

	/**
	 * Get this state's player
	 * @return Current {@link Player}
	 */
	public Player getPlayer() { return player; }

}

package org.Temirjohn.main;

import java.awt.Graphics2D;

import org.Temirjohn.entity.enemies.EnemyManager;
import org.Temirjohn.entity.towers.TowerManager;
import org.Temirjohn.levels.Level;

/**
 * Interface for game states. Defines basic functionality that needs to be implemented for every state.
 * @author Ryan Sharp
 *
 */
public interface GameState {
	/**
	 * Perform any updates needed between frames
	 */
	public void update();

	/**
	 * Redraw all components as needed between frames
	 * @param g2 - {@link Graphics2D} object used to draw
	 */
	public void draw(Graphics2D g2);

	/**
	 * Perform any actions necessary before switching states
	 */
	public void endState();

	/**
	 * Get the type of this state
	 * @return StateType enum for this type of state
	 */
	public StateType getType();

	/**
	 * Get this state's level
	 * @return Current {@link Level}
	 */
	public Level getLevel();

	/**
	 * Get this state's tower manager
	 * @return Current {@link TowerManager}
	 */
	public TowerManager getTowerManager();

	/**
	 * Get this state's enemy manager
	 * @return Current {@link EnemyManager}
	 */
	public EnemyManager getEnemyManager();

	/**
	 * Get this state's player
	 * @return Current {@link Player}
	 */
	public Player getPlayer();
}

package org.Temirjohn.main;

/**
 * Custom exception used when the player tries to spend more money than they have
 * @author Ryan Sharp
 *
 */
public class InsufficientFundsException extends Exception {

	/**
	 * Create new exception with the given message
	 * @param message - Text to be written to the console
	 */
	public InsufficientFundsException(String message) {
		super(message);
	}
}

package org.Temirjohn.main;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

/**
 * {@summary Handles input detection from the user's keyboard.}
 * @author Ryan Sharp, RyiSnow
 *
 */
public class KeyHandler implements KeyListener{

	private GamePanel gp = GamePanel.getInstance();

	/**
	 * {@summary Called automatically when a key is typed.}
	 */
	@Override
	public void keyTyped(KeyEvent e) {

	}

	/**
	 * {@summary Called automatically when a key is pressed. Used to detect player input when needed.}
	 */
	@Override
	public void keyPressed(KeyEvent e) {

		int code = e.getKeyCode();

		if(code == KeyEvent.VK_ESCAPE) {
			if(gp.getState().getType().equals(StateType.GAMEPLAY)) {
				GameplayState current = (GameplayState)gp.getState();
				System.out.println("Pausing game...");
				gp.updateState(new PausedState(current.getLevel(), current.getTowerManager(), current.getEnemyManager(), current.getPlayer()));
			}
			else if (gp.getState().getType().equals(StateType.PAUSE)) {
				PausedState current = (PausedState)gp.getState();
				System.out.println("Resuming game...");
				gp.updateState(new GameplayState(current.getLevel(), current.getTowerManager(), current.getEnemyManager(), current.getPlayer()));
			}
			else if(gp.getState().getType().equals(StateType.PLACEMENT)) {
				PlacementState current = (PlacementState)gp.getState();
				System.out.println("Cancelling placement...");
				current.getPlayer().addMoney(current.getTower().getType().getCost());
				gp.updateState(new GameplayState(current.getLevel(), current.getTowerManager(), current.getEnemyManager(), current.getPlayer()));
			}
		}

	}

	/**
	 * {@summary Called automatically when a key is released. Used to detect end of user input when needed.}
	 */
	@Override
	public void keyReleased(KeyEvent e) {


	}

}

package org.Temirjohn.main;

import java.awt.Dimension;

import javax.swing.JFrame;
import javax.swing.JLayeredPane;

/**
 *
 * @author RyiSnow (https://www.youtube.com/c/RyiSnow), Ryan Sharp
 * {@summary This is the only class that needs to be run in order to start the game.
 * 			 This class will be responsible for creating the graphical window that the game runs in.}
 *
 */
public class Main {

	private static JLayeredPane pane;

	/**
	 * {@summary Run this method to start the game!}
	 * @author Ryan Sharp
	 * @param args
	 */
	public static void main(String[] args) {
		JFrame window = new JFrame();
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setResizable(false);
		window.setTitle("Tower Defense");
		pane = window.getLayeredPane();

		GamePanel gamePanel = GamePanel.getInstance(); //Updated this to use singleton pattern rather than creating instance variable

		pane.setSize(new Dimension(gamePanel.SCREEN_WIDTH, gamePanel.SCREEN_HEIGHT));
		pane.setLocation(0, 0);
		pane.add(gamePanel, Integer.valueOf(0));

		window.setSize(gamePanel.SCREEN_WIDTH + (gamePanel.TILE_SIZE / 2) - 10, gamePanel.SCREEN_HEIGHT + gamePanel.TILE_SIZE - 10);

		window.setLocationRelativeTo(null);
		window.setVisible(true);

		gamePanel.requestFocusInWindow();
		gamePanel.startGameThread();
	}

	/**
	 * Get the layered pane in the application JFrame. Used by UI classes to add elements on top of GamePanel.
	 * @return The layered pane of the JFrame
	 */
	public static JLayeredPane getPane() { return pane; }
}

package org.Temirjohn.main;

import java.awt.Graphics2D;

import org.Temirjohn.entity.SpriteNotFoundException;
import org.Temirjohn.entity.enemies.EnemyManager;
import org.Temirjohn.entity.towers.TowerManager;
import org.Temirjohn.levels.Level;
import org.Temirjohn.ui.MainMenuUI;

/**
 * Game state used when the player is on the main menu of the game
 * @author Ryan Sharp
 *
 */
public class MainMenuState implements GameState{

	private MainMenuUI ui;


	public MainMenuState() {
		try {
			ui = new MainMenuUI();
		}
		catch(SpriteNotFoundException e) {
			System.out.println("Error: MainMenuUI could not find necessary images.");
		}

	}

	@Override
	public void update() {
		// TODO Auto-generated method stub

	}

	@Override
	public void draw(Graphics2D g2) {
		// TODO Auto-generated method stub

	}

	@Override
	public void endState() {
		ui.remove();
	}

	@Override
	public StateType getType() {
		return StateType.MENU;
	}

	@Override
	public Level getLevel() {
		return null;
	}

	@Override
	public TowerManager getTowerManager() {
		return null;
	}

	@Override
	public EnemyManager getEnemyManager() {
		return null;
	}

	@Override
	public Player getPlayer() {
		return null;
	}

}

package org.Temirjohn.main;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

/**
 * {@summary Handles input detection from the user's mouse.}
 * @author Ryan Sharp
 *
 */
public class MouseHandler implements MouseListener{

	GamePanel gp = GamePanel.getInstance();

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		if(gp.getState().getType().equals(StateType.PLACEMENT)) {
			PlacementState current = (PlacementState) gp.getState();
			if(current.getTower().getCollision() == false) {
				System.out.println("Attempting to place tower...");
				current.getTowerManager().add(current.getTower());
				gp.updateState(new GameplayState(current.getLevel(), current.getTowerManager(), current.getEnemyManager(), current.getPlayer()));
			}
		}
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

}

package org.Temirjohn.main;

import java.awt.Graphics2D;

import org.Temirjohn.entity.enemies.EnemyManager;
import org.Temirjohn.entity.towers.TowerManager;
import org.Temirjohn.levels.Level;
import org.Temirjohn.ui.PauseUI;

/**
 * Game state used when the player is in a level and the game is paused
 * @author Ryan Sharp
 *
 */
class PausedState implements GameState {

	// Input handling and game thread
	private Level level;
	private TowerManager towerM;
	private EnemyManager enemyM;
	private Player player;
	private PauseUI ui;

	public PausedState(Level level, TowerManager towerM, EnemyManager enemyM, Player player) {
		this.level = level;
		this.towerM = towerM;
		this.enemyM = enemyM;
		this.player = player;
		this.ui = new PauseUI();
	}

	@Override
	public void update() {
		// nothing, for now
		// will be updated if pause menu is implemented
	}

	@Override
	public void draw(Graphics2D g2) {
		level.draw(g2);
		enemyM.draw(g2);
		towerM.draw(g2);
		g2.dispose();
	}

	@Override
	public StateType getType() {
		return StateType.PAUSE;
	}

	@Override
	public void endState() {
		ui.remove();
	}


	public Level getLevel() { return level; }

	/**
	 * Get this state's tower manager
	 * @return Current {@link TowerManager}
	 */
	public TowerManager getTowerManager() { return towerM; }

	/**
	 * Get this state's enemy manager
	 * @return Current {@link EnemyManager}
	 */
	public EnemyManager getEnemyManager() { return enemyM; }

	/**
	 * Get this state's player
	 * @return Current {@link Player}
	 */
	public Player getPlayer() { return player; }

}

package org.Temirjohn.main;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Point;

import javax.swing.JLabel;
import javax.swing.SwingUtilities;

import org.Temirjohn.entity.enemies.EnemyManager;
import org.Temirjohn.entity.towers.Tower;
import org.Temirjohn.entity.towers.TowerManager;
import org.Temirjohn.levels.Level;

public class PlacementState implements GameState {

	// Input handling and game thread
	private Level level;
	private TowerManager towerM;
	private EnemyManager enemyM;
	private Player player;
	private Tower tower;
	private GamePanel gp;
	private Composite transparent, opaque;
	private JLabel instructions;

	public PlacementState(Level level, TowerManager towerM, EnemyManager enemyM, Player player, Tower tower) {
		this.level = level;
		this.towerM = towerM;
		this.enemyM = enemyM;
		this.player = player;
		this.tower = tower;
		this.gp = GamePanel.getInstance();
		transparent = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.75f);
		opaque = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f);

		instructions = new JLabel();
		instructions.setFont(new Font("arial", Font.PLAIN, 40));
		instructions.setText("Click to place tower. Press esc to cancel.");
		instructions.setForeground(Color.white);
		instructions.setHorizontalAlignment(JLabel.CENTER);
		instructions.setVerticalAlignment(JLabel.CENTER);
		instructions.setBounds((int)((gp.SCREEN_WIDTH / 2) - (instructions.getPreferredSize().getWidth() / 2)), gp.TILE_SIZE, (int)instructions.getPreferredSize().getWidth(), (int)instructions.getPreferredSize().getHeight());
		Main.getPane().add(instructions, Integer.valueOf(1));
	}

	@Override
	public void update() {
		Point p = MouseInfo.getPointerInfo().getLocation();
		SwingUtilities.convertPointFromScreen(p, gp);

		towerM.update();
		enemyM.update();
		tower.setPos(p.x - (gp.TILE_SIZE / 2), p.y - (gp.TILE_SIZE / 2));
		tower.getCollisionBox().setLocation(p.x - ((tower.getType().getCollisionInfo()[2] * gp.SCALE) / 2), p.y - ((tower.getType().getCollisionInfo()[3] * gp.SCALE) / 2));
		CollisionChecker.check(tower);
	}

	@Override
	public void draw(Graphics2D g2) {
		level.draw(g2);
		enemyM.draw(g2);
		towerM.draw(g2);
		if(tower.getCollision()) {
			g2.setComposite(transparent);
			tower.draw(g2);
			g2.setComposite(opaque);
		}
		else {
			g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.3f));
			g2.setColor(Color.white);
			g2.fillOval(tower.getX() - tower.getRange() + (gp.TILE_SIZE / 2), tower.getY() - tower.getRange() + (gp.TILE_SIZE / 2), tower.getRange() * 2, tower.getRange()  * 2);
			g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));
			tower.draw(g2);
			g2.dispose();
		}

	}

	@Override
	public StateType getType() {
		return StateType.PLACEMENT;
	}

	@Override
	public void endState() {
		Main.getPane().remove(instructions);
	}

	/**
	 * Get the tower that is being placed
	 * @return {@link Tower} being placed
	 */
	public Tower getTower() { return tower; }

	/**
	 * Get this state's tile manager
	 * @return Current {@link TileManager}
	 */
	public Level getLevel() { return level; }

	/**
	 * Get this state's tower manager
	 * @return Current {@link TowerManager}
	 */
	public TowerManager getTowerManager() { return towerM; }

	/**
	 * Get this state's enemy manager
	 * @return Current {@link EnemyManager}
	 */
	public EnemyManager getEnemyManager() { return enemyM; }

	/**
	 * Get this state's player
	 * @return Current {@link Player}
	 */
	public Player getPlayer() { return player; }

}

package org.Temirjohn.main;

/**
 * This class holds the player's stats and info during the game.
 * Referenced by UI classes to display accurate information as the game progresses.
 * @author Ryan
 *
 */
public class Player {
	private int health, money;
	private GamePanel gp;

	/**
	 * Create a player with the given amount of health and money
	 * @param health
	 * @param money
	 */
	public Player(int health, int money) {
		this.health = health;
		this.money = money;
		this.gp = GamePanel.getInstance();
	}

	/**
	 * @return Player's current health
	 */
	public int getHealth() { return health; }

	/**
	 * @return Player's current money
	 */
	public int getMoney() { return money; }

	/**
	 * Add health to player's current amount
	 * @param amt
	 */
	public void addHealth(int amt) { health += amt; }

	/**
	 * Remove health from player's current amount.
	 * End the level if the player dies.
	 * @param amt
	 */
	public void removeHealth(int amt) {
		health -= amt;
		if (health <= 0) {
			// switch to game over state
		}
	}

	/**
	 * Add money to player's current amount.
	 * @param amt
	 */
	public void addMoney(int amt) { money += amt; }

	/**
	 * Remove money from player's current amount, if able.
	 * Throw exception if unable.
	 * @param amt
	 */
	public void removeMoney(int amt) throws InsufficientFundsException {
		if(money >= amt)
			money -= amt;
		else
			throw new InsufficientFundsException("Player does not have " + amt + " money!");
	}
}

package org.Temirjohn.main;

/**
 * Enum used to define each possible game state without room for typos
 * @author Ryan Sharp
 *
 */
public enum StateType {
	GAMEPLAY, PAUSE, PLACEMENT, MENU;
}

package org.Temirjohn.main;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 * Generic toolbox class, currently only used to resize images
 * @author Ryan Sharp
 *
 */
public class UtilityCenter {

	/**
	 * rescale a given image to the given width and height desired
	 * @param image
	 * @param width
	 * @param height
	 * @return
	 */
	public static BufferedImage scaleImage(BufferedImage image, int width, int height) {
		BufferedImage scaledImage = new BufferedImage(width, height, image.getType());
		Graphics2D g2 = scaledImage.createGraphics();
		g2.setBackground(null);
		g2.drawImage(image, 0, 0, width, height, null);
		g2.dispose();
		return scaledImage;
	}
}

package org.Temirjohn.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import org.Temirjohn.entity.SpriteNotFoundException;
import org.Temirjohn.entity.towers.CannonTower;
import org.Temirjohn.entity.towers.SniperTower;
import org.Temirjohn.entity.towers.TowerType;
import org.Temirjohn.entity.towers.TurretTower;
import org.Temirjohn.main.GamePanel;
import org.Temirjohn.main.GameplayState;
import org.Temirjohn.main.InsufficientFundsException;
import org.Temirjohn.main.Main;
import org.Temirjohn.main.PlacementState;
import org.Temirjohn.main.UtilityCenter;

/**
 * UI class to display the proper UI during the gameplay state
 * @author Ryan Sharp
 *
 */
public class GameplayUI {

	private GamePanel gp;
	private JPanel shop;
	private JLabel healthLabel, moneyLabel, shopLabel, turretLabel, cannonLabel, sniperLabel;
	private JButton turretButton, cannonButton, sniperButton, startButton, toggleShopButton;
	private BufferedImage heart, coin, turretShop, cannonShop, sniperShop, start, wait, openShop, closeShop;
	private Font arial30, arial20;
	private GameplayUIButtonHandler listener;
	private boolean waveRunning;

	/**
	 * Create new gameplay UI
	 * @throws SpriteNotFoundException - Thrown if the images needed cannot be found.
	 */
	public GameplayUI() throws SpriteNotFoundException{
		waveRunning = false;
		gp = GamePanel.getInstance();
		listener = new GameplayUIButtonHandler();

		arial30 = new Font("arial", Font.PLAIN, 30);
		arial20 = new Font("arial", Font.PLAIN, 20);

		try {
			heart = ImageIO.read(getClass().getResourceAsStream("/ui/Lives.png"));
			heart = UtilityCenter.scaleImage(heart, 30, 30);

			coin = ImageIO.read(getClass().getResourceAsStream("/ui/Money.png"));
			coin = UtilityCenter.scaleImage(coin, 30, 30);

			turretShop = ImageIO.read(getClass().getResourceAsStream("/ui/UITurretButton.png"));
			turretShop = UtilityCenter.scaleImage(turretShop, gp.TILE_SIZE, gp.TILE_SIZE);

			cannonShop = ImageIO.read(getClass().getResourceAsStream("/ui/UICannonButton.png"));
			cannonShop = UtilityCenter.scaleImage(cannonShop, gp.TILE_SIZE, gp.TILE_SIZE);

			sniperShop = ImageIO.read(getClass().getResourceAsStream("/ui/UISniperButton.png"));
			sniperShop = UtilityCenter.scaleImage(sniperShop, gp.TILE_SIZE, gp.TILE_SIZE);

			start = ImageIO.read(getClass().getResourceAsStream("/ui/StartButton.png"));
			start = UtilityCenter.scaleImage(start, gp.TILE_SIZE, gp.TILE_SIZE);

			wait = ImageIO.read(getClass().getResourceAsStream("/ui/WaitButton.png"));
			wait = UtilityCenter.scaleImage(wait, gp.TILE_SIZE, gp.TILE_SIZE);

			openShop = ImageIO.read(getClass().getResourceAsStream("/ui/ShopButton.png"));
			openShop = UtilityCenter.scaleImage(openShop, 30, 30);

			closeShop = ImageIO.read(getClass().getResourceAsStream("/ui/CloseButton.png"));
			closeShop = UtilityCenter.scaleImage(closeShop, 30, 30);
		}
		catch(Exception e) {
			throw new SpriteNotFoundException("GameplayUI");
		}

		int shopX = gp.SCREEN_WIDTH - (3*gp.TILE_SIZE);
		shop = new JPanel();
		shop.setBounds(shopX, 0, gp.TILE_SIZE * 3, gp.SCREEN_HEIGHT / 2);
		shop.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		shop.setAlignmentX(Component.CENTER_ALIGNMENT);
		shop.setBackground(new Color(94, 67, 15));
		shop.setOpaque(true);

		shopLabel = new JLabel();
		setupLabel(shopLabel, arial30, "SHOP", Color.white, null);
		shopLabel.setHorizontalAlignment(JLabel.CENTER);
		c.gridx = 0;
		c.gridy = 0;
		shop.add(shopLabel, c);

		turretButton = new JButton(new ImageIcon(turretShop));
		turretButton.setBorder(BorderFactory.createEmptyBorder());
		turretButton.setContentAreaFilled(false);
		turretButton.addActionListener(listener);
		turretButton.setActionCommand("Buy Turret");
		c.gridy++;
		shop.add(turretButton, c);

		turretLabel = new JLabel();
		setupLabel(turretLabel, arial20, String.valueOf(TowerType.TURRET.getCost()), Color.white, new ImageIcon(UtilityCenter.scaleImage(coin, 20, 20)));
		turretLabel.setHorizontalAlignment(JLabel.CENTER);
		c.gridy++;
		shop.add(turretLabel, c);

		cannonButton = new JButton(new ImageIcon(cannonShop));
		cannonButton.setBorder(BorderFactory.createEmptyBorder());
		cannonButton.setContentAreaFilled(false);
		cannonButton.addActionListener(listener);
		cannonButton.setActionCommand("Buy Cannon");
		c.gridy++;
		shop.add(cannonButton, c);

		cannonLabel = new JLabel();
		setupLabel(cannonLabel, arial20, String.valueOf(TowerType.CANNON.getCost()), Color.white, new ImageIcon(UtilityCenter.scaleImage(coin, 20, 20)));
		cannonLabel.setHorizontalAlignment(JLabel.CENTER);
		c.gridy++;
		shop.add(cannonLabel, c);

		sniperButton = new JButton(new ImageIcon(sniperShop));
		sniperButton.setBorder(BorderFactory.createEmptyBorder());
		sniperButton.setContentAreaFilled(false);
		sniperButton.addActionListener(listener);
		sniperButton.setActionCommand("Buy Sniper");
		c.gridy++;
		shop.add(sniperButton, c);

		sniperLabel = new JLabel();
		setupLabel(sniperLabel, arial20, String.valueOf(TowerType.SNIPER.getCost()), Color.white, new ImageIcon(UtilityCenter.scaleImage(coin, 20, 20)));
		sniperLabel.setHorizontalAlignment(JLabel.CENTER);
		c.gridy++;
		shop.add(sniperLabel, c);

		Main.getPane().add(shop, Integer.valueOf(1));

		toggleShopButton = new JButton(new ImageIcon(closeShop));
		toggleShopButton.setBounds(gp.SCREEN_WIDTH - 50, 20, 30, 30);
		toggleShopButton.setBorder(BorderFactory.createEmptyBorder());
		toggleShopButton.setContentAreaFilled(false);
		toggleShopButton.addActionListener(listener);
		toggleShopButton.setActionCommand("Toggle Shop");
		shop.add(toggleShopButton, c);
		Main.getPane().add(toggleShopButton, Integer.valueOf(2));


		startButton = new JButton(new ImageIcon(start));
		startButton.setBounds((int)(gp.SCREEN_WIDTH - (1.5 * gp.TILE_SIZE)), (int)(gp.SCREEN_HEIGHT - (1.5 * gp.TILE_SIZE)), gp.TILE_SIZE, gp.TILE_SIZE);
		startButton.setBorder(BorderFactory.createEmptyBorder());
		startButton.setContentAreaFilled(false);
		startButton.addActionListener(listener);
		startButton.setActionCommand("Start");
		Main.getPane().add(startButton, Integer.valueOf(2));

		healthLabel = new JLabel();
		setupLabel(healthLabel, arial30, String.valueOf(200), Color.white, new ImageIcon(heart));
		healthLabel.setHorizontalAlignment(JLabel.CENTER);
		healthLabel.setVerticalAlignment(JLabel.CENTER);
		healthLabel.setBounds(20, 20, 100, 30);
		Main.getPane().add(healthLabel, Integer.valueOf(1));

		moneyLabel = new JLabel();
		setupLabel(moneyLabel, arial30, String.valueOf(350), Color.white, new ImageIcon(coin));
		moneyLabel.setHorizontalAlignment(JLabel.CENTER);
		moneyLabel.setVerticalAlignment(JLabel.CENTER);
		moneyLabel.setBounds(120, 20, 150, 30);
		Main.getPane().add(moneyLabel, Integer.valueOf(1));
	}

	/**
	 * Helper method to set up labels more concisely. Set the label, font, text, foreground color, and icon of a label.
	 * @param label
	 * @param font
	 * @param text
	 * @param foreground
	 * @param icon
	 */
	private void setupLabel(JLabel label, Font font, String text, Color foreground, ImageIcon icon) {
		label.setFont(font);
		label.setText(text);
		label.setForeground(foreground);
		label.setIcon(icon);
	}

	/**
	 * Removes the UI from the screen. Used when switching states. Otherwise the UI will still be visible in other states.
	 */
	public void remove() {
		Main.getPane().remove(shop);
		Main.getPane().remove(healthLabel);
		Main.getPane().remove(moneyLabel);
		Main.getPane().remove(startButton);
		Main.getPane().remove(toggleShopButton);
	}

	/**
	 * Set whether the enemy wave is currently running
	 * @param running - True if running, false otherwise
	 */
	public void setWaveRunning(boolean running) {
		if(running != waveRunning) {
			System.out.println("updating running status");
			this.waveRunning = running;
			if(waveRunning) {
				startButton.setIcon(new ImageIcon(wait));
			}
			else {
				startButton.setIcon(new ImageIcon(start));
			}
		}
	}

	/**
	 * Set the text of the health label to the value given
	 * @param amt - Value label should be set to
	 */
	public void setHealth(int amt) { healthLabel.setText(String.valueOf(amt)); }

	/**
	 * Set the text of the money lable to the value given
	 * @param amt - Value label should be set to
	 */
	public void setMoney(int amt) { moneyLabel.setText(String.valueOf(amt)); }

	private class GameplayUIButtonHandler implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("Player pressed button: " + e.getActionCommand());

			Point p = MouseInfo.getPointerInfo().getLocation();
			SwingUtilities.convertPointFromScreen(p, gp);

			GameplayState current = (GameplayState)gp.getState();

			switch(e.getActionCommand()) {
			case("Toggle Shop"):
				if(shop.isVisible()) {
					shop.setVisible(false);
					toggleShopButton.setIcon(new ImageIcon(openShop));
				}
				else {
					shop.setVisible(true);
					toggleShopButton.setIcon(new ImageIcon(closeShop));
				}
				break;
			case ("Buy Turret"):
				try {
					gp.getState().getPlayer().removeMoney(TowerType.TURRET.getCost());
					gp.updateState(new PlacementState(current.getLevel(), current.getTowerManager(), current.getEnemyManager(), current.getPlayer(), new TurretTower(p.x, p.y)));
				}
				catch(InsufficientFundsException ex) {
					System.out.println(ex.getMessage());
				}

				break;
			case ("Buy Cannon"):
				try {
					gp.getState().getPlayer().removeMoney(TowerType.CANNON.getCost());
					gp.updateState(new PlacementState(current.getLevel(), current.getTowerManager(), current.getEnemyManager(), current.getPlayer(), new CannonTower(p.x, p.y)));
				}
				catch(InsufficientFundsException ex) {
					System.out.println(ex.getMessage());
				}

				break;
			case("Buy Sniper"):
				try {
					gp.getState().getPlayer().removeMoney(TowerType.SNIPER.getCost());
					gp.updateState(new PlacementState(current.getLevel(), current.getTowerManager(), current.getEnemyManager(), current.getPlayer(), new SniperTower(p.x, p.y)));
				}
				catch(InsufficientFundsException ex) {
					System.out.println(ex.getMessage());
				}

				break;
			case("Start"):
				if(!waveRunning) {
					gp.getState().getEnemyManager().getWaves().nextWave();
					setWaveRunning(true);
				}
				break;
			}

			gp.requestFocusInWindow();
		}

	}

}

package org.Temirjohn.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.Temirjohn.entity.SpriteNotFoundException;
import org.Temirjohn.entity.enemies.Difficulty;
import org.Temirjohn.entity.enemies.EnemyManager;
import org.Temirjohn.entity.towers.TowerManager;
import org.Temirjohn.levels.Level;
import org.Temirjohn.levels.Level1;
import org.Temirjohn.levels.Level2;
import org.Temirjohn.levels.Level3;
import org.Temirjohn.levels.LevelDifficulty;
import org.Temirjohn.main.GamePanel;
import org.Temirjohn.main.GameplayState;
import org.Temirjohn.main.Main;
import org.Temirjohn.main.Player;
import org.Temirjohn.main.UtilityCenter;

/**
 * Responsible for displaying and updating the swing components of the main menu
 * @author Ryan Sharp
 *
 */
public class MainMenuUI {
	private GamePanel gp;
	private JLabel title, credits, levels, difficulties;
	private JButton play, quit, level1, level2, level3, easy, medium, hard, backButton;
	private JPanel titleScreen, levelSelect, difficultySelect;
	private BufferedImage turret, cannon, sniper, redEnemy, blueEnemy, greenEnemy, orangeEnemy, purpleEnemy, back;
	private Font arial20, arial40, arial80;
	private MainMenuUIButtonHandler listener;
	private int screen;
	private Level selectedLevel;
	private Difficulty selectedDifficulty;
	private LevelDifficulty selectedLevelDifficulty;

	/**
	 * Create new Main Menu UI
	 * @throws SpriteNotFoundException
	 */
	public MainMenuUI() throws SpriteNotFoundException {
		gp = GamePanel.getInstance();
		listener = new MainMenuUIButtonHandler();
		screen = 0;

		arial20 = new Font("arial", Font.PLAIN, 20);
		arial40 = new Font("arial", Font.PLAIN, 40);
		arial80 = new Font("arial", Font.PLAIN, 80);

		try {
			turret = ImageIO.read(getClass().getResourceAsStream("/towers/Turret.png"));
			turret = UtilityCenter.scaleImage(turret, gp.TILE_SIZE * 2, gp.TILE_SIZE * 2);

			cannon = ImageIO.read(getClass().getResourceAsStream("/towers/Cannon.png"));
			cannon = UtilityCenter.scaleImage(cannon, gp.TILE_SIZE * 2, gp.TILE_SIZE * 2);

			sniper = ImageIO.read(getClass().getResourceAsStream("/towers/Sniper.png"));
			sniper = UtilityCenter.scaleImage(sniper, gp.TILE_SIZE * 2, gp.TILE_SIZE * 2);

			redEnemy = ImageIO.read(getClass().getResourceAsStream("/enemies/EnemyRed.png"));
			redEnemy = UtilityCenter.scaleImage(redEnemy, gp.TILE_SIZE * 2, gp.TILE_SIZE * 2);

			blueEnemy = ImageIO.read(getClass().getResourceAsStream("/enemies/EnemyBlue.png"));
			blueEnemy = UtilityCenter.scaleImage(blueEnemy, gp.TILE_SIZE * 2, gp.TILE_SIZE * 2);

			greenEnemy = ImageIO.read(getClass().getResourceAsStream("/enemies/EnemyGreen.png"));
			greenEnemy = UtilityCenter.scaleImage(greenEnemy, gp.TILE_SIZE * 2, gp.TILE_SIZE * 2);

			orangeEnemy = ImageIO.read(getClass().getResourceAsStream("/enemies/EnemyOrange.png"));
			orangeEnemy = UtilityCenter.scaleImage(orangeEnemy, gp.TILE_SIZE * 2, gp.TILE_SIZE * 2);

			purpleEnemy = ImageIO.read(getClass().getResourceAsStream("/enemies/EnemyPurple.png"));
			purpleEnemy = UtilityCenter.scaleImage(purpleEnemy, gp.TILE_SIZE * 2, gp.TILE_SIZE * 2);

			back = ImageIO.read(getClass().getResourceAsStream("/ui/BackButton.png"));
			back = UtilityCenter.scaleImage(back, gp.TILE_SIZE, gp.TILE_SIZE);
		}
		catch(Exception e) {
			throw new SpriteNotFoundException("GameplayUI");
		}

		titleScreen = new JPanel();
		titleScreen.setBounds(0,0, gp.SCREEN_WIDTH, gp.SCREEN_HEIGHT);
		titleScreen.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		titleScreen.setAlignmentX(Component.CENTER_ALIGNMENT);
		titleScreen.setBackground(new Color(23, 102, 27));
		titleScreen.setOpaque(true);
		titleScreen.setVisible(true);

		title = new JLabel();
		title.setFont(arial80);
		title.setText("Tower Defense");
		title.setForeground(Color.white);
		title.setHorizontalAlignment(JLabel.CENTER);
		c.gridx = 0;
		c.gridy = 0;
		titleScreen.add(title, c);

		credits = new JLabel();
		credits.setFont(arial20);
		credits.setText("A game by Ryan Sharp and Ricardo Almeida");
		credits.setForeground(Color.white);
		credits.setHorizontalAlignment(JLabel.CENTER);
		c.gridy++;
		titleScreen.add(credits, c);

		play = new JButton();
		play.setFont(arial40);
		play.setText("PLAY");
		play.addActionListener(listener);
		play.setActionCommand("Play");
		c.gridy++;
		c.insets = new Insets(gp.TILE_SIZE * 2, 0, 0, 0);
		titleScreen.add(play, c);

		quit = new JButton();
		quit.setFont(arial40);
		quit.setText("QUIT");
		quit.addActionListener(listener);
		quit.setActionCommand("Quit");
		c.gridy++;
		c.insets = new Insets(gp.TILE_SIZE, 0, 0, 0);
		titleScreen.add(quit, c);

		Main.getPane().add(titleScreen, Integer.valueOf(1));

		levelSelect = new JPanel();
		levelSelect.setBounds(0,0, gp.SCREEN_WIDTH, gp.SCREEN_HEIGHT);
		levelSelect.setLayout(new GridBagLayout());
		levelSelect.setAlignmentX(Component.CENTER_ALIGNMENT);
		levelSelect.setBackground(new Color(23, 102, 27));
		levelSelect.setOpaque(true);
		levelSelect.setVisible(false);

		levels = new JLabel();
		levels.setFont(arial40);
		levels.setText("Level Select");
		levels.setForeground(Color.white);
		levels.setHorizontalAlignment(JLabel.CENTER);
		c.gridx = 0;
		c.gridy = 0;
		levelSelect.add(levels, c);

		level1 = new JButton();
		level1.setFont(arial40);
		level1.setText("GRASS");
		level1.addActionListener(listener);
		level1.setActionCommand("Level 1");
		c.gridy++;
		levelSelect.add(level1, c);

		level2 = new JButton();
		level2.setFont(arial40);
		level2.setText("SAND");
		level2.addActionListener(listener);
		level2.setActionCommand("Level 2");
		c.gridy++;
		levelSelect.add(level2, c);

		level3 = new JButton();
		level3.setFont(arial40);
		level3.setText("SNOW");
		level3.addActionListener(listener);
		level3.setActionCommand("Level 3");
		c.gridy++;
		levelSelect.add(level3, c);

		Main.getPane().add(levelSelect, Integer.valueOf(1));

		difficultySelect = new JPanel();
		difficultySelect.setBounds(0,0, gp.SCREEN_WIDTH, gp.SCREEN_HEIGHT);
		difficultySelect.setLayout(new GridBagLayout());
		difficultySelect.setAlignmentX(Component.CENTER_ALIGNMENT);
		difficultySelect.setBackground(new Color(23, 102, 27));
		difficultySelect.setOpaque(true);
		difficultySelect.setVisible(false);

		difficulties = new JLabel();
		difficulties.setFont(arial40);
		difficulties.setText("Difficulty Select");
		difficulties.setForeground(Color.white);
		difficulties.setHorizontalAlignment(JLabel.CENTER);
		c.gridx = 0;
		c.gridy = 0;
		difficultySelect.add(difficulties, c);

		easy = new JButton();
		easy.setFont(arial40);
		easy.setText("EASY");
		easy.addActionListener(listener);
		easy.setActionCommand("Easy");
		c.gridy++;
		difficultySelect.add(easy, c);

		medium = new JButton();
		medium.setFont(arial40);
		medium.setText("MEDIUM");
		medium.addActionListener(listener);
		medium.setActionCommand("Medium");
		c.gridy++;
		difficultySelect.add(medium, c);

		hard = new JButton();
		hard.setFont(arial40);
		hard.setText("HARD");
		hard.addActionListener(listener);
		hard.setActionCommand("Hard");
		c.gridy++;
		difficultySelect.add(hard, c);

		Main.getPane().add(difficultySelect, Integer.valueOf(1));

		backButton = new JButton(new ImageIcon(back));
		backButton.setBounds((int)(gp.SCREEN_WIDTH - (1.5 * gp.TILE_SIZE)), (int)(gp.SCREEN_HEIGHT - (1.5 * gp.TILE_SIZE)), gp.TILE_SIZE, gp.TILE_SIZE);
		backButton.setBorder(BorderFactory.createEmptyBorder());
		backButton.setContentAreaFilled(false);
		backButton.addActionListener(listener);
		backButton.setActionCommand("Back");
		backButton.setVisible(false);

		Main.getPane().add(backButton, Integer.valueOf(2));
	}

	/**
	 * Remove this UI from the screen
	 */
	public void remove() {
		Main.getPane().remove(titleScreen);
		Main.getPane().remove(levelSelect);
		Main.getPane().remove(difficultySelect);
		Main.getPane().remove(backButton);
	}

	private class MainMenuUIButtonHandler implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("Player pressed button: " + e.getActionCommand());

			switch(e.getActionCommand()) {
			case("Play"):
				titleScreen.setVisible(false);
				levelSelect.setVisible(true);
				backButton.setVisible(true);
				screen = 1;
				break;
			case("Quit"):
				System.exit(0);
				break;
			case("Level 1"):
				selectedLevel = new Level1();
				levelSelect.setVisible(false);
				difficultySelect.setVisible(true);
				screen = 2;
				break;
			case("Level 2"):
				selectedLevel = new Level2();
				levelSelect.setVisible(false);
				difficultySelect.setVisible(true);
				screen = 2;
				break;
			case("Level 3"):
				selectedLevel = new Level3();
				levelSelect.setVisible(false);
				difficultySelect.setVisible(true);
				screen = 2;
				break;
			case("Easy"):
				selectedDifficulty = Difficulty.EASY;
				selectedLevelDifficulty = LevelDifficulty.EASY;
				gp.updateState(new GameplayState(selectedLevel, new TowerManager(), new EnemyManager(selectedLevel, selectedDifficulty), new Player(selectedLevelDifficulty.getStartingHealth(), selectedLevelDifficulty.getStartingMoney())));
				break;
			case("Medium"):
				selectedDifficulty = Difficulty.MEDIUM;
				selectedLevelDifficulty = LevelDifficulty.MEDIUM;
				gp.updateState(new GameplayState(selectedLevel, new TowerManager(), new EnemyManager(selectedLevel, selectedDifficulty), new Player(selectedLevelDifficulty.getStartingHealth(), selectedLevelDifficulty.getStartingMoney())));
				break;
			case("Hard"):
				selectedDifficulty = Difficulty.HARD;
				selectedLevelDifficulty = LevelDifficulty.HARD;
				gp.updateState(new GameplayState(selectedLevel, new TowerManager(), new EnemyManager(selectedLevel, selectedDifficulty), new Player(selectedLevelDifficulty.getStartingHealth(), selectedLevelDifficulty.getStartingMoney())));
				break;
			case("Back"):
				if(screen == 2) {
					difficultySelect.setVisible(false);
					levelSelect.setVisible(true);
					screen = 1;
				}
				else if(screen == 1) {
					levelSelect.setVisible(false);
					titleScreen.setVisible(true);
					screen = 0;
					backButton.setVisible(false);
				}
				break;
			}
		}

	}
}

package org.Temirjohn.ui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.Temirjohn.main.GamePanel;
import org.Temirjohn.main.Main;
import org.Temirjohn.main.MainMenuState;

/**
 * UI class used to create the pause menu
 * @author Ryan Sharp
 *
 */
public class PauseUI {
	private GamePanel gp;
	private Font arial40;
	private JPanel pauseMenu;
	private JButton menu;
	private JLabel pause;
	private PauseUIButtonHandler listener;

	/**
	 * Create pause menu UI
	 */
	public PauseUI() {
		gp = GamePanel.getInstance();
		arial40 = new Font("Arial", Font.PLAIN, 40);
		listener = new PauseUIButtonHandler();

		pauseMenu = new JPanel();
		pauseMenu.setBounds(0,0, gp.SCREEN_WIDTH, gp.SCREEN_HEIGHT);
		pauseMenu.setLayout(new GridBagLayout());
		pauseMenu.setAlignmentX(Component.CENTER_ALIGNMENT);
		pauseMenu.setVisible(true);
		pauseMenu.setOpaque(false);
		GridBagConstraints c = new GridBagConstraints();

		pause = new JLabel();
		pause.setFont(arial40);
		pause.setText("PAUSED");
		pause.setForeground(Color.white);
		pause.setHorizontalAlignment(JLabel.CENTER);
		c.gridx = 0;
		c.gridy = 0;
		pauseMenu.add(pause, c);

		menu = new JButton();
		menu.setFont(arial40);
		menu.setText("EXIT TO MENU");
		menu.addActionListener(listener);
		menu.setActionCommand("Menu");
		c.insets = new Insets(gp.TILE_SIZE, 0, 0, 0);
		c.gridy++;
		pauseMenu.add(menu, c);

		Main.getPane().add(pauseMenu, Integer.valueOf(1));
	}

	/**
	 * Remove this UI from the screen
	 */
	public void remove() {
		Main.getPane().remove(pauseMenu);
	}

	private class PauseUIButtonHandler implements ActionListener{

		@Override
		public void actionPerformed(ActionEvent e) {
			System.out.println("Player pressed button: " + e.getActionCommand());

			switch(e.getActionCommand()) {
			case("Menu"):
				gp.updateState(new MainMenuState());
				break;
			}
		}

	}

}
