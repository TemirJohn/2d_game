package org.Temirjohn.entity.towers;

import java.awt.Rectangle;
import java.util.Random;

import org.Temirjohn.entity.enemies.IEnemy;

/**
 * Cannon tower, able to fire explosive rounds with splash damage at a slow rate and short range.
 * @author Ryan Sharp
 *
 */
public class CannonTower extends Tower {

	// radius of the cannonball's explosion, in pixels.
	private int explosionRadius = 20;

	// accuracy of the cannonball, in pixels. Cannonball will fire within this many pixels of the target.
	private int accuracy = 10;

	// random object used to randomize the cannonball's position when fired.
	private Random r = new Random();

	/**
	 * Create cannon tower at given x and y pixels
	 * @param x
	 * @param y
	 */
	public CannonTower(int x, int y) {
		super(x, y, TowerType.CANNON);
		this.setCollisionBox(new Rectangle(TowerType.CANNON.getCollisionInfo()[0] * gp.SCALE,
				TowerType.CANNON.getCollisionInfo()[1] * gp.SCALE,
				TowerType.CANNON.getCollisionInfo()[2] * gp.SCALE,
				TowerType.CANNON.getCollisionInfo()[3] * gp.SCALE));
	}

	@Override
	public void attack() {
		if(target != null) {
			int explosionOffsetX = r.nextInt(accuracy*2) - accuracy;
			int explosionOffsetY = r.nextInt(accuracy*2) - accuracy;
			for(IEnemy e : gp.getState().getEnemyManager().getChildren()) {
				if(Math.sqrt((Math.pow((e.getX() - (target.getX() - explosionOffsetX)), 2)
						+ Math.pow(e.getY() - (target.getY() - explosionOffsetY), 2))) <= explosionRadius * gp.SCALE) { // for each enemy in radius of the explosion
					e.takeDamage(damage);
				}
			}
			if(target.getHealth() <= 0) {
				gp.getState().getPlayer().addMoney(damage + target.getHealth());
				target = null;
			}
			else {
				gp.getState().getPlayer().addMoney(damage);
			}
		}
	}

	@Override
	public void updateTarget() {
		if(target != null && Math.hypot(target.getX() - x, target.getY() - y) > range)
			target = null;
		for(IEnemy e : gp.getState().getEnemyManager().getChildren()) {
			if(Math.hypot(e.getX() - x, e.getY() - y) <= range && // if enemy is within range
					(target ==  null || e.getDistanceTraveled() > target.getDistanceTraveled())) { // and if enemy is at the front of those within range
				target = e;
				setAngle((Math.atan2(x - e.getX(), y - e.getY()) * -1) + Math.PI);
			}
		}
	}
}

package org.Temirjohn.entity.towers;

/**
 * Decorator to double the fire rate of a tower
 * @author Ryan Sharp
 *
 */
public class DoubleFireRateTowerDecorator extends TowerDecorator {

	/**
	 * Create decorator for given tower
	 * @param decoratedTower - tower to be decorated
	 */
	public DoubleFireRateTowerDecorator(Tower decoratedTower) {
		super(decoratedTower);
	}

	/**
	 * @return half the fire rate delay of the decorated tower
	 */
	@Override
	public double getFireRate() {
		return 0.5 * decoratedTower.getFireRate();
	}

}

package org.Temirjohn.entity.towers;

import java.awt.Graphics2D;
import java.awt.Rectangle;

/**
 * Interface defining basic functionality that any tower or tower substitute needs to be able to fulfill
 * @author Ryan Sharp
 *
 */
public interface ITower {
	/**
	 * Check whether the given ITower is the composite TowerManager
	 * @return Itself if it is the TowerManager, null otherwise.
	 */
	public TowerManager getComposite();

	/**
	 * Get this tower's collision box
	 * @return {@link Rectangle} collision box
	 */
	public Rectangle getCollisionBox();

	/**
	 * Sets the collision box for this instance
	 * @param box Rectangle object
	 */
	public void setCollisionBox(Rectangle box);

	/**
	 * Get the {@link TowerType} of this ITower
	 * @return
	 */
	public TowerType getType();

	/**
	 * Get the range of the tower
	 * @return int range
	 */
	public int getRange();

	/**
	 * Returns the ITower's x value
	 * @return <code>int</code> x value
	 */
	public int getX();

	/**
	 * Returns the ITower's y value
	 * @return <code>int</code> y value
	 */
	public int getY();

	/**
	 * Perform any updates needed between frames
	 */
	public void update();

	/**
	 * Update the tower's current target if needed
	 */
	public void updateTarget();

	/**
	 * Get the tower's fire rate delay
	 * @return fire rate
	 */
	public double getFireRate();

	/**
	 * Called periodically to attack the tower's current target.
	 */
	public void attack();

	/**
	 * Redraw the tower every frame
	 * @param g2 - {@link Graphics2D} used to draw components
	 */
	public void draw(Graphics2D g2);
}

package org.Temirjohn.entity.towers;

import java.awt.Rectangle;

import org.Temirjohn.entity.enemies.IEnemy;

/**
 * Sniper tower, able to fire at any enemy on screen for high damage, but at a slow rate.
 * @author Ryan Sharp
 *
 */
public class SniperTower extends Tower {

	/**
	 * Create a sniper tower at the given x and y pixels
	 * @param x
	 * @param y
	 */
	public SniperTower(int x, int y) {
		super(x, y, TowerType.SNIPER);
		this.setCollisionBox(new Rectangle(TowerType.SNIPER.getCollisionInfo()[0] * gp.SCALE,
				TowerType.SNIPER.getCollisionInfo()[1] * gp.SCALE,
				TowerType.SNIPER.getCollisionInfo()[2] * gp.SCALE,
				TowerType.SNIPER.getCollisionInfo()[3] * gp.SCALE));
	}

	@Override
	public void attack() {
		if(target != null) {
			target.takeDamage(damage);
			if(target.getHealth() <= 0) {
				gp.getState().getPlayer().addMoney(damage + target.getHealth());
				target = null;
			}
			else {
				gp.getState().getPlayer().addMoney(damage);
			}
		}
	}

	@Override
	public void updateTarget() {
		for(IEnemy e : gp.getState().getEnemyManager().getChildren()) {
			if(target == null || e.getDistanceTraveled() > target.getDistanceTraveled()) { // and if enemy is at the front of those within range
				target = e;
				setAngle((Math.atan2(x - e.getX(), y - e.getY()) * -1) + Math.PI);
			}
		}
	}
}

package org.Temirjohn.entity.towers;

import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import org.Temirjohn.entity.Entity;
import org.Temirjohn.entity.enemies.IEnemy;

/**
 * {@summary Base functionality of towers which defend the path from enemies.}
 * @author Ryan Sharp
 *
 */
public abstract class Tower extends Entity implements ITower {
	protected int damage;
	protected double fireRate;
	protected int range;
	protected int cost;
	protected TowerType type;
	protected long lastTime;
	protected long currentTime;
	protected double delta;
	protected IEnemy target;

	/**
	 * {@summary Handles initial position and stats of tower being created.}
	 * @param x Initial x coordinate
	 * @param y Initial y coordinate
	 * @param type Enum for the type of tower. Contains default stats of that type.
	 */
	public Tower(int x, int y, TowerType type) {
		super(x, y, type.getSpriteFilePath());
		this.damage = type.getDamage();
		this.fireRate = type.getFireRate();
		this.range = type.getRange() * gp.SCALE;
		this.cost = type.getCost();
		this.type = type;
		this.lastTime = System.nanoTime();
		this.angle = 0;
		System.out.println(type.getType() + " range is " + range);
	}

	/**
	 * Used to check if the given tower is a composite or leaf. TowerManager returns itself, all others return null;
	 * @return TowerManager or null
	 */
	public TowerManager getComposite() { return null; }

	/**
	 * Get the TowerType enum for what type of tower this is
	 * @return {@link TowerType}
	 */
	public TowerType getType() { return type; }

	public int getRange() { return range; }

	/**
	 * Default update routine for towers. Updates list of targets (enemies in range) and attacks if ready.
	 */
	public void update() {
		updateTarget();
		updateDelta();
		double fireDelay = 1000000000 * getFireRate();
		if(delta > fireDelay && target != null) {
			attack();
			delta = 0;
		}
	}

	/**
	 * Updates which enemy the tower is targeting.
	 */
	public abstract void updateTarget();

	/**
	 * Updates delta every frame to ensure proper fireRate.
	 */
	public void updateDelta() {
		currentTime = System.nanoTime();
		delta += (currentTime - lastTime) / fireRate;
		lastTime = currentTime;
	}

	/**
	 * Getter method used by decorators in case of modification.
	 * @return Appropriate fire rate based on decorators.
	 */
	public double getFireRate() { return  fireRate; }

	/**
	 * Called periodically to deal damage to the tower's current target.
	 */
	public abstract void attack();

	/**
	 * Towers always rotate toward their target
	 */
	@Override
	public void draw(Graphics2D g2) {
		if(target != null) {
			setAngle((Math.atan2(x - target.getX(), y - target.getY()) * -1) + Math.PI);
		}
		AffineTransform original = g2.getTransform();
		AffineTransform tx = AffineTransform.getRotateInstance(angle, x + (gp.TILE_SIZE / 2), y + (gp.TILE_SIZE / 2));
		g2.setTransform(tx);
		g2.drawImage(sprite, x, y, null);
		g2.setTransform(original);
	}

}

package org.Temirjohn.entity.towers;

import java.awt.Graphics2D;
import java.awt.Rectangle;

/**
 * Base class for tower decorations. Should not be applied directly do a tower, as it will not do anything.
 * @author Ryan Sharp
 *
 */
public class TowerDecorator implements ITower {

	// Tower or decorator being decorated. Following this to its root always ends in a tower of some kind.
	protected final ITower decoratedTower;

	/**
	 * Create a decorator for the given tower
	 * @param tower - Tower to be decorated
	 */
	public TowerDecorator(ITower tower) {
		decoratedTower = tower;
	}

	@Override
	public void update() {
		decoratedTower.update();
	}

	@Override
	public TowerManager getComposite() {
		return decoratedTower.getComposite();
	}

	@Override
	public void updateTarget() {
		decoratedTower.updateTarget();
	}

	@Override
	public double getFireRate() {
		return decoratedTower.getFireRate();
	}

	@Override
	public void attack() {
		decoratedTower.attack();
	}

	@Override
	public void draw(Graphics2D g2) {
		decoratedTower.draw(g2);
	}

	@Override
	public Rectangle getCollisionBox() {
		return decoratedTower.getCollisionBox();
	}

	@Override
	public void setCollisionBox(Rectangle box) {
		decoratedTower.setCollisionBox(box);
	}

	@Override
	public int getX() {
		return decoratedTower.getX();
	}

	@Override
	public int getY() {
		return decoratedTower.getY();
	}

	@Override
	public TowerType getType() {
		return decoratedTower.getType();
	}

	@Override
	public int getRange() {
		return decoratedTower.getRange();
	}

}

package org.Temirjohn.entity.towers;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.List;

import org.Temirjohn.main.GamePanel;

/**
 * This class acts as a composite, allowing GamePanel to update and draw all the player's towers at once rather
 * than having to loop through each one.
 *
 * @author Ryan Sharp
 *
 */
public class TowerManager implements ITower {

	protected List<ITower> children = new ArrayList<ITower>();

	/**
	 * Calls the update function on all towers individually.
	 */
	@Override
	public void update() {
		for(ITower t : children) {
			t.update();
		}
	}

	/**
	 * Calls the draw function on all towers individually.
	 */
	@Override
	public void draw(Graphics2D g2) {
		for(ITower t : children) {
			t.draw(g2);
		}
	}

	/**
	 * Add a tower to the TowerManager's children.
	 * @param t Tower to be added
	 */
	public void add(ITower t) {
		t.getCollisionBox().setLocation(t.getX() + (t.getType().getCollisionInfo()[0] * GamePanel.getInstance().SCALE), t.getY() + (t.getType().getCollisionInfo()[1] * GamePanel.getInstance().SCALE));
		System.out.println("Tower at X=" + t.getX() + ", Y=" + t.getY());
		System.out.println("Collision box at X=" + t.getCollisionBox().getLocation().x + ", Y=" + t.getCollisionBox().getLocation().y);
		children.add(t);
	}

	/**
	 * Remove a tower from the TowerManager's children.
	 * @param t Tower to be removed
	 */
	public void remove(ITower t) { children.remove(t); }

	/**
	 * Find and return a specific child from TowerManager
	 * @param target Tower being searched for
	 * @return Tower if found, otherwise null
	 */
	public ITower getChild(ITower target) {
		for(ITower t : children) {
			if(t.equals(target))
				return t;
		}
		return null;
	}

	/**
	 * Get the list of towers managed by this TowerManager
	 * @return List of {@link ITower} objects
	 */
	public List<ITower> getChildren() { return children; }

	@Override
	public TowerManager getComposite() { return this; }

	@Override
	public void updateTarget() {}

	@Override
	public void attack() {}

	@Override
	public double getFireRate() { return 0; }

	@Override
	public Rectangle getCollisionBox() {
		return null;
	}

	@Override
	public void setCollisionBox(Rectangle box) {
		// TODO Auto-generated method stub

	}

	@Override
	public int getX() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public int getY() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public TowerType getType() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int getRange() {
		// TODO Auto-generated method stub
		return 0;
	}
}

package org.Temirjohn.entity.towers;

/**
 * {@summary Holds default stats for the different types of towers at creation time.}
 * @author Ryan Sharp
 *
 */
public enum TowerType {
	TURRET(1, 0.5, 50, 200, "turret", "/towers/Turret.png", 2, 2, 12, 12),
	CANNON(5, 1.0, 35, 350, "cannon", "/towers/Cannon.png", 4, 3, 8, 11),
	SNIPER(3, 1.5, 1000, 300, "sniper", "/towers/Sniper.png", 5, 0, 6, 15);

	private final int DAMAGE, RANGE, COST;
	private final int[] COLLISION_INFO;
	private final double FIRE_RATE;
	private final String TYPE;
	private final String DEFAULT_SPRITE_FILE_PATH;

	private TowerType(int DAMAGE, double FIRE_RATE,
			int RANGE, int COST, String TYPE, String DEFAULT_SPRITE_FILE_PATH,
			int X, int Y, int WIDTH, int HEIGHT){
		this.DAMAGE = DAMAGE;
		this.FIRE_RATE = FIRE_RATE;
		this.RANGE = RANGE;
		this.COST = COST;
		this.TYPE = TYPE;
		this.DEFAULT_SPRITE_FILE_PATH = DEFAULT_SPRITE_FILE_PATH;
		this.COLLISION_INFO = new int[]{X, Y, WIDTH, HEIGHT};
	}

	/**
	 * Get the default damage of a tower type
	 * @return damage
	 */
	public int getDamage() { return DAMAGE; }

	/**
	 * Get the default fire rate delay of a tower type
	 * @return fire rate
	 */
	public double getFireRate() { return FIRE_RATE; }

	/**
	 * Get the default range of a tower type
	 * @return range
	 */
	public int getRange() { return RANGE; }

	/**
	 * Get the default cost of a tower type
	 * @return cost
	 */
	public int getCost() { return COST; }

	/**
	 * Get the type of a tower in string form
	 * @return type
	 */
	public String getType() { return TYPE; }

	/**
	 * Get the default sprite file path of a tower type
	 * @return file path
	 */
	public String getSpriteFilePath() { return DEFAULT_SPRITE_FILE_PATH; }

	/**
	 * Get the unscaled x and y offsets, width, and height of a tower's collision box in an array
	 * @return int[x, y, width, height]
	 */
	public int[] getCollisionInfo() { return COLLISION_INFO; }
}

package org.Temirjohn.entity.towers;

import java.awt.Rectangle;

import org.Temirjohn.entity.enemies.IEnemy;

/**
 * Turret type tower, able to rapidly attack enemies for a lower damage.
 * @author Ryan Sharp
 *
 */
public class TurretTower extends Tower {

	/**
	 * Create Turret Tower at given x and y pixels.
	 * @param x
	 * @param y
	 */
	public TurretTower(int x, int y) {
		super(x, y, TowerType.TURRET);
		this.setCollisionBox(new Rectangle(TowerType.TURRET.getCollisionInfo()[0] * gp.SCALE,
				TowerType.TURRET.getCollisionInfo()[1] * gp.SCALE,
				TowerType.TURRET.getCollisionInfo()[2] * gp.SCALE,
				TowerType.TURRET.getCollisionInfo()[3] * gp.SCALE));
	}

	@Override
	public void attack() {
		if(target != null) {
			target.takeDamage(damage);
			if(target.getHealth() <= 0) {
				gp.getState().getPlayer().addMoney(damage + target.getHealth());
				target = null;
			}
			else {
				gp.getState().getPlayer().addMoney(damage);
			}
		}
	}

	@Override
	public void updateTarget() {
		if(target != null && Math.hypot(target.getX() - x, target.getY() - y) > range) {
			target = null;
		}

		for(IEnemy e : gp.getState().getEnemyManager().getChildren()) {
			if(Math.hypot(e.getX() - x, e.getY() - y) <= range && // if enemy is within range
					(target == null || e.getDistanceTraveled() > target.getDistanceTraveled())) { // and if enemy is at the front of those within range, or there is no current target
				target = e;
				setAngle((Math.atan2(x - e.getX(), y - e.getY()) * -1) + Math.PI);
			}
		}
	}

}

package org.Temirjohn.entity;

/**
 * Simple direction enumeration:
 * NORTH = "up"
 * SOUTH = "down"
 * EAST = "right"
 * WEST = "left"
 * @author Ricardo Almeida
 *
 */
public enum Direction {	UP, DOWN, RIGHT, LEFT; }

package org.Temirjohn.entity;

import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import org.Temirjohn.main.GamePanel;
import org.Temirjohn.main.UtilityCenter;

/**
 * {@summary Parent of all entities in the game. Handles basic properties of all entities like position and sprite.}
 * @author Ryan Sharp, refactored by Ricardo Almeida
 *
 */
public abstract class Entity {
	protected int x;
	protected int y;
	protected int health = 1;	// Default health is 1
	protected int strength = 1;	// Default strength is 1
	protected Rectangle collisionBox = new Rectangle(1, 1);
	protected BufferedImage sprite;
	protected double angle = 0;
	protected GamePanel gp;
	protected boolean collision = false;
	protected Direction currentDirection = Direction.RIGHT;	// Default direction is RIGHT


	public Entity(int x, int y, String spritePath) {
		this.x = x;
		this.y = y;
		this.gp = GamePanel.getInstance();
		try {
			setSpriteImage(spritePath);
		}
		catch(SpriteNotFoundException e) {
			System.out.println(e.getMessage());
		}
	}

	/**
	 * Set the sprite of an entity
	 * @param spritePath
	 * @throws SpriteNotFoundException
	 */
	protected void setSpriteImage(String spritePath) throws SpriteNotFoundException {
		try {
			this.sprite = ImageIO.read(getClass().getResourceAsStream(spritePath));
			this.sprite = UtilityCenter.scaleImage(sprite, gp.TILE_SIZE, gp.TILE_SIZE);
		}
		catch (IOException e) {
			throw new SpriteNotFoundException(spritePath);
		}
	}

	/**
	 * Returns the entity's x value
	 * @return <code>int</code> x value
	 */
	public int getX() { return x; }

	/**
	 * Returns the entity's y value
	 * @return <code>int</code> y value
	 */
	public int getY() { return y; }

	/**
	 * Set the position of an entity to the given x and y pixel coordinates
	 * @param x
	 * @param y
	 */
	public void setPos(int x, int y) {
		this.x = x;
		this.y = y;
	}

	/**
	 * Check whether an entity has collided with an object
	 * @return true if collided, otherwise false
	 */
	public boolean getCollision() { return collision; }

	/**
	 * Set whether an entity has collided with an object
	 * @param col - true if collided, otherwise false
	 */
	public void setCollision(boolean col) { collision = col; }

	/**
	 * @return Entity instance health
	 */
	public int getHealth() {
		return health;
	}

	/**
	 * @return Entity instance strength
	 */
	public int getStrength() {
		return strength;
	}

	/**
	 * @return The collision box
	 */
	public Rectangle getCollisionBox() {
		return collisionBox;
	}

	/**
	 * Returns the current entity direction
	 * @return Direction The current entity direction
	 */
	public Direction getDirection() { return currentDirection; }

	/**
	 * Sets the health of the entity instance
	 * @param health The amount of health to set
	 */
	protected void setHealth(int health) {
		if(health > 0)
			this.health = health;
		else
			this.health = 0;
	}

	/**
	 * Sets the strength of the entity instance
	 * @param strength Strength to set
	 */
	protected void setStrength(int strength) {
		if(strength > 0)
			this.strength = strength;
	}

	/**
	 * Sets the collision box for this instance
	 * @param box Rectangle object
	 */
	public void setCollisionBox(Rectangle box) {
		this.collisionBox = box;
	}

	/**
	 * Sets a new direction for the entity
	 * @param newDirection The new direction to set
	 */
	public void setDirection(Direction newDirection) {
		currentDirection = newDirection;
	}

	/**
	 * Set the angle at which to draw the entity
	 * @param angle in radians
	 */
	protected void setAngle(double angle) { this.angle = angle; }

	/**
	 * Causes the entity to take damage
	 * @param damageAmount Integer representing amount of damage to the entity
	 */
	public void takeDamage(int damageAmount) {
		setHealth(this.health - damageAmount);
	}

	/**
	 * {@summary Used to update the position/state of this individual entity. Will be called once per frame.}
	 */
	public abstract void update();

	/**
	 * {@summary Used to repaint this individual entity after update(). Will be called once per frame.}
	 * @param g2 Graphics element responsible for drawing on the screen.
	 */
	public void draw(Graphics2D g2) {
		AffineTransform original = g2.getTransform();
		AffineTransform tx = AffineTransform.getRotateInstance(angle, x + (gp.TILE_SIZE / 2), y + (gp.TILE_SIZE / 2));
		g2.setTransform(tx);
		g2.drawImage(sprite, x, y, null);
		g2.setTransform(original);
	}


	/**
	 * Equals override
	 * @return boolean True or False
	 */
	@Override
	public boolean equals(Object obj) {
		if(obj != null && (x == ((Entity)obj).x) && (y == ((Entity)obj).y) &&
				health == ((Entity)obj).health &&
				strength == ((Entity)obj).strength &&
				collisionBox.equals(((Entity)obj).collisionBox) &&
				sprite.equals(((Entity)obj).sprite) &&
				gp.equals(((Entity)obj).gp) &&
				sprite.equals(((Entity)obj).sprite) &&
				collision == ((Entity)obj).collision &&
				currentDirection == ((Entity)obj).currentDirection) {
			return true;
		}
		else {
			return false;
		}
	}

	/**
	 * hashCode override
	 * @return integer representing the hashcode for the current instance
	 */
	@Override
	public int hashCode() {
		int output = super.hashCode();
		output += ((Integer)x).hashCode() + ((Integer)y).hashCode() + sprite.hashCode() + gp.hashCode();
		output += x + y + health + strength + collisionBox.hashCode() + sprite.hashCode() + gp.hashCode() + currentDirection.hashCode();

		return output;
	}

	/**
	 * toString override
	 * @return String representation of the current instance
	 */
	@Override
	public String toString() {
		StringBuilder output = new StringBuilder();
		output.append(String.format("Type: %s\n", this.getClass().toString()));
		output.append(String.format("Coordinates: x=%d, y=%d\n", x, y));
		output.append(String.format("Health: %d\n", health));
		output.append(String.format("Strength: %d\n", strength));
		output.append(String.format("Sprite: %s", sprite.toString()));
		output.append(String.format("Direction: %s\n", currentDirection.toString()));

		return output.toString();
	}
}

package org.Temirjohn.entity;

import java.io.IOException;

/**
 * {@summary Custom exception for when an entity's sprite cannot be found.}
 * @author Ryan Sharp
 *
 */
public class SpriteNotFoundException extends IOException {

	/**
	 * @param path File path of sprite that could not be found.
	 */
	public SpriteNotFoundException(String path) {
		super("Sprite could not be found at " + path + ".");
	}
}
