package org.Temirjohn.levels;

import java.awt.*;

/**
 * Levels interface
 * @author Ricardo Almeida
 */
public interface iLevel {
    /**
     * Draws the level
     */
    public void draw(Graphics2D g2);
}

package org.Temirjohn.levels;

/**
 * LevelFactory interface.
 * Implements a single method: createLevel
 * @author Ricardo Almeida
 */
public interface iLevelFactory {
    iLevel createLevel(int levelNum);
}

package org.Temirjohn.levels;

import org.Temirjohn.main.GamePanel;
import java.awt.Graphics2D;
import org.Temirjohn.entity.Direction;

/**
 * @author RyiSnow, Ryan Sharp, Ricardo Almeida (refactoring)
 * Abstract Level class that serves as a template for other Levels
 * <p>
 * This class is responsible for loading and drawing the background tile map of the level.
 * Levels are designed by creating a space delimited text file containing the index of the
 * tile set to be drawn on each square of the map. The text file should have the same dimensions as
 * the screen, unless a world map and camera movement are being implemented.
 * <p>
 *
 */
public abstract class Level implements iLevel {
    // The panel to draw the level in
    protected GamePanel gp;

    /* This array contains references to each of the distinct tiles that can be drawn in the level.
     * Think of this as your "artist's palette" when drawing a level. */
    protected MapTile[] tileSet;

    /* This 2D array contains the index of the tile in tileSet that is to be drawn on each tile of the screen.
     * This is the actual layout of the level. */
    protected int levelMap[][];

    // length of the path in pixels
    protected int pathLength;

    // Coordinates for the start point of the path. Default is (0,0)
    int startX = 0;
    int startY = 0;

    // Starting direction. Default is RIGHT
    Direction startDir = Direction.RIGHT;

    /**
     * Default constructor
     */
    public Level() {
        gp = GamePanel.getInstance();
        tileSet = new MapTile[10];
        levelMap = new int[gp.MAX_SCREEN_COL][gp.MAX_SCREEN_ROW];
    }

    /**
     *  Loads the set of map tiles
     */
    protected abstract void loadTileSet();

    /**
     * Loads the map data
     */
    protected abstract void loadMap();

    /**
     * Draws each tile of the level as dictated by levelMap.
     *
     * @param g2 The Graphics2D object drawing the scene.
     */
    public void draw(Graphics2D g2) {
        int x = 0, y = 0;

        for(int row = 0; row < gp.MAX_SCREEN_ROW; row++) {
            for(int col = 0; col < gp.MAX_SCREEN_COL; col++) {
                int tileNum = levelMap[col][row];

                g2.drawImage(tileSet[tileNum].sprite, x, y, gp.TILE_SIZE, gp.TILE_SIZE, null);
                x += gp.TILE_SIZE;
            }

            x = 0;
            y += gp.TILE_SIZE;
        }
    }

    /**
     * Get this level's map data
     * @return 2D array of integers representing the tileSet index of the tiles that make up the map
     */
    public int[][] getMap() { return levelMap; }

    /**
     * Get this level's tile set
     * @return Array of MapTile objects which compose the map
     */
    public MapTile[] getTileSet() { return tileSet; }

    /**
     * Get the length of the path on this level in pixels
     * @return int length of path
     */
    public int getPathLength() { return pathLength; }

    /**
     * Returns the starting X coordinate for enemies
     * @return <code>int</code> Starting X coordinate
     */
    public int getStartX() { return startX; }

    /**
     * Returns the starting Y coordinate for enemies
     * @return <code>int</code> Starting Y coordinate
     */
    public int getStartY() { return startY; }

    /**
     * Returns the start direction for the enemies
     * @return <code>Direction</code> The start direction
     */
    public Direction getStartDir() { return startDir; }
}

package org.Temirjohn.levels;

import org.Temirjohn.entity.SpriteNotFoundException;
import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import org.Temirjohn.entity.Direction;

/**
 * Loads the tileset and path for the grasslands level
 * @author Ricardo Almeida
 *
 */
public class Level1 extends Level {
    /**
     * Default constructor
     */
    public Level1() {
    	loadTileSet();
    	loadMap();
    }

    @Override
    protected void loadTileSet() {
        try {
            tileSet[0] = new MapTile("/tiles/Grass.png");

            tileSet[1] = new MapTile("/tiles/Path.png");
            tileSet[1].collision = true;
        }
        catch(SpriteNotFoundException e) {
            System.out.println(e.getMessage());
        }
    }

    @Override
    protected void loadMap() {
        try {
            InputStream is = getClass().getResourceAsStream("/levels/level01.txt");
            BufferedReader br = new BufferedReader(new InputStreamReader(is));

            // Get the first line in the file and extract the start point and direction
            String firstLine[] = (br.readLine()).split(" ");
            startX = Integer.parseInt(firstLine[0]) * gp.TILE_SIZE;
            startY = Integer.parseInt(firstLine[1]) * gp.TILE_SIZE;
            startDir = Direction.valueOf(firstLine[2]);

            // Populate the map array
            for(int row = 0; row < gp.MAX_SCREEN_ROW; row++) {
                String line = br.readLine();
                String numbers[] = line.split(" ");

                for(int col = 0; col < gp.MAX_SCREEN_COL; col++) {
                    int num = Integer.parseInt(numbers[col]);
                    levelMap[col][row] = num;
                    if(num == 1)
                    	pathLength++;
                }
            }

            br.close();

            pathLength *= gp.TILE_SIZE;
        }
        catch(Exception e) {
        	System.out.println("Could not find level data");
        }
    }
}

package org.Temirjohn.levels;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.Temirjohn.entity.Direction;
import org.Temirjohn.entity.SpriteNotFoundException;

/**
 * loads the tileset and path for the desert level
 * @author Ricardo Almeida
 *
 */
public class Level2 extends Level {
    /**
     * Default constructor
     */
    public Level2() {
    	loadTileSet();
    	loadMap();
    }

    @Override
    protected void loadTileSet() {
        try {
            tileSet[0] = new MapTile("/tiles/Sand.png");

            tileSet[1] = new MapTile("/tiles/Sandstone.png");
            tileSet[1].collision = true;
        }
        catch(SpriteNotFoundException e) {
            System.out.println(e.getMessage());
        }
    }

    @Override
    protected void loadMap() {
        try {
            InputStream is = getClass().getResourceAsStream("/levels/level02.txt");
            BufferedReader br = new BufferedReader(new InputStreamReader(is));

         // Get the first line in the file and extract the start point and direction
            String firstLine[] = (br.readLine()).split(" ");
            startX = Integer.parseInt(firstLine[0]) * gp.TILE_SIZE;
            startY = Integer.parseInt(firstLine[1]) * gp.TILE_SIZE;
            startDir = Direction.valueOf(firstLine[2]);

            for(int row = 0; row < gp.MAX_SCREEN_ROW; row++) {
                String line = br.readLine();
                String numbers[] = line.split(" ");

                for(int col = 0; col < gp.MAX_SCREEN_COL; col++) {
                    int num = Integer.parseInt(numbers[col]);
                    levelMap[col][row] = num;
                    if(num == 1)
                    	pathLength++;
                }
            }

            br.close();

            pathLength *= gp.TILE_SIZE;
            pathLength += 3 * gp.TILE_SIZE; // account for overlaps
        }
        catch(Exception e) {
        	System.out.println("Could not find level data");
        }
    }
}

package org.Temirjohn.levels;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.Temirjohn.entity.Direction;
import org.Temirjohn.entity.SpriteNotFoundException;

/**
 * loads the tileset and path for the snow level
 * @author Ricardo Almeida
 *
 */
public class Level3 extends Level {
    /**
     * Default constructor
     */
    public Level3() {
    	loadTileSet();
    	loadMap();
    }

    @Override
    protected void loadTileSet() {
        try {
            tileSet[0] = new MapTile("/tiles/Snow.png");

            tileSet[1] = new MapTile("/tiles/Ice.png");
            tileSet[1].collision = true;
        }
        catch(SpriteNotFoundException e) {
            System.out.println(e.getMessage());
        }
    }

    @Override
    protected void loadMap() {
        try {
            InputStream is = getClass().getResourceAsStream("/levels/level03.txt");
            BufferedReader br = new BufferedReader(new InputStreamReader(is));

         // Get the first line in the file and extract the start point and direction
            String firstLine[] = (br.readLine()).split(" ");
            startX = Integer.parseInt(firstLine[0]) * gp.TILE_SIZE;
            startY = Integer.parseInt(firstLine[1]) * gp.TILE_SIZE;
            startDir = Direction.valueOf(firstLine[2]);

            for(int row = 0; row < gp.MAX_SCREEN_ROW; row++) {
                String line = br.readLine();
                String numbers[] = line.split(" ");

                for(int col = 0; col < gp.MAX_SCREEN_COL; col++) {
                    int num = Integer.parseInt(numbers[col]);
                    levelMap[col][row] = num;
                    if(num == 1)
                    	pathLength++;
                }
            }

            br.close();

            pathLength *= gp.TILE_SIZE;
            pathLength += gp.TILE_SIZE * 2; // account for overlaps
        }
        catch(Exception e) {
        	System.out.println("Could not find level data");
        }
    }
}

package org.Temirjohn.levels;

/**
 * Enum to hold difficulty-based stats. Should have been combined with Difficulty.java but we ran out of time
 * @author Ryan Sharp
 *
 */
public enum LevelDifficulty {
	EASY(500, 300, 1.0, 0.9),
	MEDIUM(450, 250, 1.25, 0.8),
	HARD(350, 200, 1.5, 0.75);

	private final int STARTING_MONEY, STARTING_HEALTH;
	private final double COST_MULTIPLIER, SALE_MULTIPLIER;

	private LevelDifficulty(int money, int health, double cost, double sale) {
		this.STARTING_MONEY = money;
		this.STARTING_HEALTH = health;
		this.COST_MULTIPLIER = cost;
		this.SALE_MULTIPLIER = sale;
	}

	/**
	 * Get the amount of money the player should start with on the corresponding difficulty
	 * @return int amount of money
	 */
	public int getStartingMoney() { return STARTING_MONEY; }

	/**
	 * Get the amount of health the player should start with on the corresponding difficulty
	 * @return int amount of health
	 */
	public int getStartingHealth() { return STARTING_HEALTH; }

	/**
	 * Get the cost multiplier for purchased items on the corresponding difficulty
	 * @return double cost multiplier
	 */
	public double getCostMultiplier() { return COST_MULTIPLIER; }

	/**
	 * Get the sale multiplier for selling items on the corresponding difficulty
	 * @return double sale multiplier
	 */
	public double getSaleMultiplier() { return SALE_MULTIPLIER; }
}

package org.Temirjohn.levels;

/**
 * Creates levels
 * @author Ricardo Almeida
 */
public class LevelFactory implements iLevelFactory{
    /**
     * Constructor that takes a level number
     * @param levelNum Integer representing a level number
     */
    public LevelFactory(int levelNum) { createLevel(levelNum); }

    /**
     * Creates a new level
     * @param levelNum The level number
     * @return A new level
     */
    @Override
    public iLevel createLevel(int levelNum) {
        switch (levelNum) {
            case '1':
                return new Level1();
            case '2':
                return new Level2();
            case '3':
                return new Level3();
            default:
                return null;
        }
    }
}

package org.Temirjohn.levels;

import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import org.Temirjohn.entity.SpriteNotFoundException;

/**
 * Defines a graphics tile for use in drawing a level
 * @author Ricardo Almeida
 */
public class MapTile {

    protected BufferedImage sprite;
    protected boolean collision = false;

    public MapTile(String path) throws SpriteNotFoundException {
        try {
            setSprite(path);
        }
        catch (SpriteNotFoundException e) {
        	System.out.println("Could not find sprite at " + path);
            // Needs to be set to a "default" sprite
            setSprite("/tiles/Grass.png");
        }
    }

    void setSprite(String path) throws SpriteNotFoundException {
        try {
            sprite = ImageIO.read(getClass().getResourceAsStream(path));
        }
        catch(IOException e) {
            throw new SpriteNotFoundException(path);
        }
    }

    /**
     * Check whether the tile has collision
     * @return True if has collision, otherwise false
     */
    public boolean getCollision() { return collision; }
}
